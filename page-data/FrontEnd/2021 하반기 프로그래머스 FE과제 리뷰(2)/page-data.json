{"componentChunkName":"component---src-templates-blog-post-js","path":"/FrontEnd/2021 하반기 프로그래머스 FE과제 리뷰(2)/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"7969fdbd-9cec-5c6b-a179-3e9b66156785","excerpt":"이번 글에서는 helper 함수, 컴포넌트 설계와 리스트 페이지 구현을 다뤄보려고한다.\n저번 글과 달리 코드를 먼저 작성하고 그 코드에 대해서 설명하는 방식으로 작성하려고 한다. 1. helper 함수  JS 로 DOM 에 접근하는 경우에는 ,  DOM API 를 자주사용한다. scope 로는 defaultValue…","html":"<p>이번 글에서는 helper 함수, 컴포넌트 설계와 리스트 페이지 구현을 다뤄보려고한다.\n저번 글과 달리 코드를 먼저 작성하고 그 코드에 대해서 설명하는 방식으로 작성하려고 한다.</p>\n<h2 id=\"1-helper-함수\" style=\"position:relative;\"><a href=\"#1-helper-%ED%95%A8%EC%88%98\" aria-label=\"1 helper 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. helper 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// utils/helper.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">qs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">,</span> scope <span class=\"token operator\">=</span> document</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selector<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'no selector'</span>\n  <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">qsAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">,</span> scope <span class=\"token operator\">=</span> document</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selector<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'no selector'</span>\n  <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createComma</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">price</span> <span class=\"token operator\">=></span> price<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ko-KR'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTarget</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">qsAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">qs &amp; qsAll</code></li>\n</ul>\n<p>JS 로 DOM 에 접근하는 경우에는 <code class=\"language-text\">querySelector</code>, <code class=\"language-text\">querySelectorAll</code> <strong>DOM API</strong> 를 자주사용한다. scope 로는 defaultValue 를 할당하고 필요한 경우에만 사용한다. 개발환경에서 잘못된 <code class=\"language-text\">selector</code> 선택하는 휴먼 에러를 방지하기 위해서 다음과 같이 작성해준다.</p>\n<ul>\n<li><code class=\"language-text\">log()</code></li>\n</ul>\n<p><code class=\"language-text\">console.log</code> 는 개발할 때 정말 많이 사용한다. <code class=\"language-text\">log</code> 라는 함수로 작성해서 사용하다보면 그래도 10글자보다는 짧기 때문에 개발 효율성을 조금이나마 올려주는 것 같다.</p>\n<ul>\n<li><code class=\"language-text\">createComma(price)</code></li>\n</ul>\n<p>이번 문제에서는 모든 금액에 대해서는 3자리마다 <code class=\"language-text\">,</code> 를 찍어서 표시하라고 명시되어있다. <code class=\"language-text\">price</code> 라는 변수를 받아서 이를 문자열로 암시적 변환을 하고, 문자열이 갖는 내장 메서드인 <code class=\"language-text\">toLocaleString</code> 를 사용해준다.</p>\n<ul>\n<li><code class=\"language-text\">isTarget (selector, scope, target)</code></li>\n</ul>\n<p>해당 이벤트가 원하는 target 인지를 반환하는 함수이다. 이벤트 버블링을 활용한 이벤트 위임을 구현하기 위한 함수이다.</p>\n<h2 id=\"2-컴포넌트-설계\" style=\"position:relative;\"><a href=\"#2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%84%A4%EA%B3%84\" aria-label=\"2 컴포넌트 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 컴포넌트 설계</h2>\n<p>이제 컴포넌트를 설계해보자. 현 시점의 웹 어플리케이션이 컴포넌트 단위로 설계되고 개발되고 있기 때문에 VanillaJS 로 구현할 때도 이 아이디어에 착안해서 개발하는데 더 익숙해졌다. 컴포넌트 설계의 기반이 되는 순서는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 초기 렌더링\ninitialState <span class=\"token operator\">-</span> render\n\n# 상태 변화에 따른 렌더링\nstate <span class=\"token operator\">-</span> setState <span class=\"token operator\">-</span> render</code></pre></div>\n<p>컴포넌트는 <code class=\"language-text\">state</code> 를 갖고 이를 기반으로 브라우저에 출력된다. 초기 렌더링도 초기 상태인 <code class=\"language-text\">initialState</code> 에 기반해 렌더링된다.</p>\n<p>이 코드의 핵심은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">state</code> 가 변경되면 <code class=\"language-text\">render</code> 를 실행한다.</li>\n<li><code class=\"language-text\">state</code> 는 <code class=\"language-text\">setState</code> 로만 변경해야 한다.</li>\n</ul>\n<p>이제 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  $target\n  state\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$target<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">_TAG</span><span class=\"token operator\">:</span> <span class=\"token string\">'IDLE'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 자식 컴포넌트를 추가해준다.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//eventListener 를 추가해준다.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// if(!isTarget(selector, scope, event.target)) return false;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">constructor($target, props)</code></li>\n</ul>\n<p><code class=\"language-text\">constructor</code> 메서드는 class 로 생성된 객체를 생성하고 초기화한다.</p>\n<p><code class=\"language-text\">$target</code> 은 <code class=\"language-text\">innerHTML</code> 의 <code class=\"language-text\">Element</code> 를 지정하기 위해서 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> $target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.APP'</span><span class=\"token punctuation\">)</span>\n$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>target&lt;/div></span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>이를 통해 <code class=\"language-text\">element</code> 의 내용을 변경하는데 유용하게 사용할 수 있다. 특히 기존에 존재하는 <code class=\"language-text\">element</code> 를 덮어쓸 수 있어 <code class=\"language-text\">element</code> 의 내용을 지워줄 필요가 없다.</p>\n<p>범용성이 높기 때문에 단점도 갖고 있다. 이는 <code class=\"language-text\">&lt;script></code> 태그 삽입으로 인한 크로스 사이트 스크립트 공격에 취약하기 때문에 사용에 주의해야한다는 점을 인지하고 사용하면 더 좋을 것 같다. 이에 대한 대안으로는 <code class=\"language-text\">insertAdjacentHTML</code> 속성이 있고 <code class=\"language-text\">innerHTML</code> 과 달리 덮어쓰기를 할 수는 없는 속성이다. 이에 대해서는 기존에 있던 <code class=\"language-text\">Element</code> 를 삭제해야한다.</p>\n<ul>\n<li><code class=\"language-text\">setInitialState()</code></li>\n</ul>\n<p>초기 상태를 지정하는 메서드이다. <code class=\"language-text\">_TAG</code> 속성을 사용해 컴포넌트의 현재 상태를 구분한다. <code class=\"language-text\">_TAG</code> 는 <code class=\"language-text\">IDLE, LOADING, OK, ERROR</code> 4가지 값을 가질 수 있으며 이는 <strong>HTML문자열</strong>을 반환하는 <code class=\"language-text\">template</code> 함수에서 _TAG 를 기반으로 렌더링하도록 작성해줄 예정이다.</p>\n<ul>\n<li><code class=\"language-text\">setState(newState)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>새로운 상태를 받아서 상태를 변경시키는 함수이다. 기존 상태를 복사하고 새로운 상태를 주입한다.</p>\n<p>위에서 언급한 상태가 변화한다면 <code class=\"language-text\">render</code> 함수를 실행시킨다.</p>\n<ul>\n<li><code class=\"language-text\">template()</code></li>\n</ul>\n<p>HTML 문자열을 반환하는 함수이다. 상태에 맞는 <strong>HTML문자열</strong>을 반환하도록 작성한다. 이번 과제에서는 명시되지 않았지만, 종종 LOADING 상태 스피너를 보여줘야하는 요구사항이 있기 때문에 분기처리해주는 편이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>_TAG<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'IDLE'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"ProductListPage\">IDLE&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'LOADING'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"ProductListPage\">LOADING&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'ERROR'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"ProductListPage\">ERROR&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'OK'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                &lt;div class=\"ProductListPage\">\n                //...\n                &lt;/div>\n            </span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">mounted()</code></li>\n</ul>\n<p>mount 는 자식 컴포넌트가 있는 경우 이를 클래스의 인스턴스 속성인 <code class=\"language-text\">children</code> 으로 저장하기 위해 사용한다. 계층구조의 경우에 자식 컴포넌트의 상태에 접근해야할 경우가 있기 때문에 지정해준다.</p>\n<ul>\n<li><code class=\"language-text\">setEvent()</code></li>\n</ul>\n<p><code class=\"language-text\">setEvent</code> 는 <code class=\"language-text\">addEvent</code> 함수를 실행시켜주는 메서드이다. 실질적은 이벤트 리스너를 추가해주는 역할은 <code class=\"language-text\">addEvent</code> 에서 수행한다.</p>\n<ul>\n<li><code class=\"language-text\">addEvent(scope, eventType, callback, selector)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// if(!isTarget(selector, scope, event.target)) return false;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 <code class=\"language-text\">scope</code> 와 <code class=\"language-text\">eventType</code> 를 인자로 받는다. <code class=\"language-text\">scope</code> 는 대부분 해당 컴포넌트의 <code class=\"language-text\">$target</code> 으로 설정된다. 이벤트 위임을 사용할 것이기 때문에 최대한 상위 DOM 에서 이벤트를 걸어준다.</p>\n<p>다음은 <code class=\"language-text\">callback</code> 이며 이는 이벤트 발생시 핸들링할 함수를 작성해준다. 마지막 <code class=\"language-text\">selector</code> 는 원하는 event target 을 가진 selector 를 인자로 받는다. 이는 이벤트 버블링을 활용한 이벤트 위임을 활용할 때만 받는 인자이며 그 때는 주석처리한 isTarget 을 주석해제해주고 사용한다.</p>\n<p>다음은 <code class=\"language-text\">ProductListPage</code> 에서 사용하는 이벤트 위임 방식 예제코드이다. 기존 <code class=\"language-text\">target</code> 에서부터 <code class=\"language-text\">.Product</code> 클래스명을 갖는 선택자까지 탐색한다. 만약 해당 <code class=\"language-text\">target</code> 이 존재하지 않는다면 <code class=\"language-text\">callback</code> 함수가 실행되지 않고 조건을 만족한다면 해당 <code class=\"language-text\">callback</code> 함수를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token function\">qs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ProductListPage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> productId <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.Product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id\n    <span class=\"token function\">goNextPage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/web/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.Product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTarget</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-api-호출-함수\" style=\"position:relative;\"><a href=\"#3-api-%ED%98%B8%EC%B6%9C-%ED%95%A8%EC%88%98\" aria-label=\"3 api 호출 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. API 호출 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// network/index.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAllProducts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://uikt6pohhh.execute-api.ap-northeast-2.amazonaws.com/dev/products'</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> data\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NETWORK ERROR'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getProductById</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">productId</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://uikt6pohhh.execute-api.ap-northeast-2.amazonaws.com/dev/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> data\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NETWORK ERROR'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>API 호출함수 코드이다. 모든 아이템 리소스를 받아오는 함수와 id 에 해당하는 리소스를 받아오는 함수를 <code class=\"language-text\">fetch API</code> 를 활용해 작성했다.</p>\n<h2 id=\"4-productlistpage\" style=\"position:relative;\"><a href=\"#4-productlistpage\" aria-label=\"4 productlistpage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ProductListPage</h2>\n<p><code class=\"language-text\">ProductListPage</code> 컴포넌트를 작성해주기 전에 페이지 이동을 구현하는 메서드를 작성하자. <code class=\"language-text\">history API</code> 의 <code class=\"language-text\">pushState</code> 메서드를 활용해 페이지 이동을 구현할 수 있다. <code class=\"language-text\">pushState</code> 는 브라우저의 세션 기록 스택에 상태를 추가하는 메서드이기 때문이다. 다음은 <code class=\"language-text\">pushState</code> 에 대한 간략한 설명이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstate <span class=\"token operator\">-</span> 새로운 세션 기록 항목에 연결할 상태 객체이다<span class=\"token punctuation\">.</span>\ntitle <span class=\"token operator\">-</span> 지금은 사용되지 않지만 나중에 사용될 수 있고<span class=\"token punctuation\">,</span> 상태에 대한 짧은 제목을 제공할 수 있다<span class=\"token punctuation\">.</span>\nurl <span class=\"token operator\">-</span> 변경될 url이며 출처는 동일해야한다<span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// forward, back, go, pushState, replaceState</span></code></pre></div>\n<p><code class=\"language-text\">history API</code>는 <code class=\"language-text\">SPA</code> 에서 페이지 이동을 구현할 때 반드시 필요하기 때문에 잘 이해할 필요가 있다. 다음은 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/History_API\">링크</a>는 MDN 의 history API 에 대한 설명이다</p>\n<p>이를 활용해 다른 페이지로 이동하는 함수를 구현할 수 있다. 이 때 <code class=\"language-text\">pushState()</code> 메서드는 <code class=\"language-text\">popstate</code> 이벤트를 발생시키지 않기 때문에 <code class=\"language-text\">router()</code> 함수를 한 번 더 호출해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//router/index.js</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">goNextPage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">ProductList</code> 클래스를 만들어보자. 위에서 작성한 <code class=\"language-text\">Component</code> 를 상속해서 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//pages/ProductList.js</span>\n<span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/Component.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getAllProducts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../network/index.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> qs<span class=\"token punctuation\">,</span> isTarget <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/helper.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> goNextPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../router/index.js'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> _TAG<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_TAG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'IDLE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"ProductListPage\">&lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'LOADING'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"ProductListPage\">LOADING&lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'OK'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                &lt;div class=\"ProductListPage\">\n                    &lt;h1>상품목록&lt;/h1>\n                    &lt;ul>\n                    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n                      <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                        &lt;li class=\"Product\" data-id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>\n                            &lt;img src=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>imageUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> alt=\"productimage\" />\n                            &lt;div class=\"Product__info\">\n                                &lt;div></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div>\n                                &lt;div></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span>\n                                  <span class=\"token string\">'ko-KR'</span>\n                                <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">원&lt;/div>\n                            &lt;/div>\n                        &lt;/li></span><span class=\"token template-punctuation string\">`</span></span>\n                    <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n                    &lt;/ul>\n                &lt;/div>\n            </span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">qs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ProductListPage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> productId <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.Product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id\n        <span class=\"token function\">goNextPage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/web/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'.Product'</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTarget</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getProductList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_TAG</span><span class=\"token operator\">:</span> <span class=\"token string\">'LOADING'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getAllProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">_TAG</span><span class=\"token operator\">:</span> <span class=\"token string\">'OK'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_TAG</span><span class=\"token operator\">:</span> <span class=\"token string\">'ERROR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">template()</code></li>\n</ul>\n<p><code class=\"language-text\">_TAG</code> 의 상태에 기반해서 반환한다. <code class=\"language-text\">OK</code> 상태인 경우 해당 <strong>HTML문자열</strong>을 반환한다.</p>\n<ul>\n<li><code class=\"language-text\">setEvent()</code></li>\n</ul>\n<p><code class=\"language-text\">addEvent()</code> 메서드를 실행시킨다. 이 페이지에서 핸들링할 이벤트는 상품 목록을 클릭했을 때 해당 페이지로 이동하는 것이기 때문에 해당 이벤트를 핸들링하는 함수를 추가해준다.\n위에서 잠깐 다뤘지만 이벤트 위임을 활용하기 때문에 <code class=\"language-text\">isTarget</code> 함수를 불러와서 활용한다.</p>\n<ul>\n<li><code class=\"language-text\">addEvent()</code></li>\n</ul>\n<p>컴포넌트 설명할 때 다룬 내용과 다르지 않기 때문에 생략한다!</p>\n<ul>\n<li><code class=\"language-text\">getProductList()</code></li>\n</ul>\n<p>상품 목록 리소스를 가져오는 메서드이다. 비동기 요청을 하기 때문에 함수명 앞에 <code class=\"language-text\">async</code> 를 붙여준다. 먼저 해당 상태를 <code class=\"language-text\">Loading</code> 으로 변경시킨다. 그리고 data 를 받아온다.\n<code class=\"language-text\">ES2017</code> 에 등장한 <code class=\"language-text\">async-await</code> 키워드를 사용한 경우에 코드가 동기적으로 동작한다. 따라서 데이터를 받아오고 이를 기반으로 상태를 최신화한다.\n다음으로 <code class=\"language-text\">setEvent()</code> 메서드를 실행해준다. <code class=\"language-text\">template()</code> 에서 반환하는 값이 상태 기반이기 때문에 <code class=\"language-text\">template()</code> 의 반환값이 다르다면 이에 대해 다시 <code class=\"language-text\">addEventListener()</code> 를 실행시켜줘야한다.</p>\n<h2 id=\"5-router-에서-productlist-객체-생성하기\" style=\"position:relative;\"><a href=\"#5-router-%EC%97%90%EC%84%9C-productlist-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"5 router 에서 productlist 객체 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Router 에서 ProductList 객체 생성하기</h2>\n<p>class 로 컴포넌트를 작성했다고 화면에 나타나지 않는다. 이를 <code class=\"language-text\">new</code> 연산자와 함께 호출해 객체로 만들어야한다. 이전 글에서 작성한 <code class=\"language-text\">router</code> 에서 해당 객체를 만들어주자.</p>\n<p>switch-case 문을 작성했던 곳에 다음 코드를 추가해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> ProductList <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/ProductList.js'</span>\n\n<span class=\"token keyword\">const</span> $target <span class=\"token operator\">=</span> <span class=\"token function\">qs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.APP'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'/web/'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">const</span> ProductList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">match<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>view</span><span class=\"token punctuation\">(</span>$target<span class=\"token punctuation\">)</span>\n    ProductList<span class=\"token punctuation\">.</span><span class=\"token function\">getProductList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'/web/products/:productId'</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'/web/cart'</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"eolend-of-line\" style=\"position:relative;\"><a href=\"#eolend-of-line\" aria-label=\"eolend of line permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EOL(End of Line)</h2>\n<p>유용하게 사용했던 helper 함수, 컴포넌트 설계, API 호출 그리고 ProductList 컴포넌트까지 작성해봤다.원래 목표는 토요일 시험전까지 글을 완성하는 것이였는데 힘들 것 같다. 남은 내용은 <code class=\"language-text\">ProductDetail</code>, <code class=\"language-text\">Cart</code> 컴포넌트와 <code class=\"language-text\">LocalStorage</code> 활용하기인데, 토요일 시험 후에 천천히 마저 작성해야겠다.</p>\n<p>VanillaJS 로 구현하고 내 생각의 흐름을 정리하면서 재미를 느끼고 있는 것 같다. 재미를 느낀만큼 토요일 시험도 잘 보고 싶다 😊</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REFERENCE</h2>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/#_3-%E1%84%86%E1%85%A9%E1%84%83%E1%85%B2%E1%86%AF%E1%84%92%E1%85%AA\">황준일님 Vanilla Javascript로 웹 컴포넌트 만들기</a></li>\n</ul>\n<p>컴포넌트 설계를 고민할 때 정말 도움을 많이 받았던 글이다. 꼭꼭꼭 읽어봤으면 좋겠다.</p>","frontmatter":{"title":"2021 하반기 프로그래머스 FE과제 리뷰(2)","date":"March 10, 2022"}}},"pageContext":{"slug":"/FrontEnd/2021 하반기 프로그래머스 FE과제 리뷰(2)/","previous":{"fields":{"slug":"/FrontEnd/2021 하반기 프로그래머스 FE과제 리뷰(1)/"},"frontmatter":{"title":"2021 하반기 프로그래머스 FE과제 리뷰(1)"}},"next":{"fields":{"slug":"/PS/BOJ 3190 빵집/"},"frontmatter":{"title":"[백준 3190] 빵집 (Node.js)"}}}},"staticQueryHashes":["2486386679","3128451518"]}