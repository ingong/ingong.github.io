{"componentChunkName":"component---src-templates-blog-post-js","path":"/PS/PG Level3 표 편집/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"d589f153-cb87-5c29-a825-f5ccec2f43e4","excerpt":"문제 코딩테스트 연습 - 표 편집 문제 풀이 <풀이 방법> 더블 링크드 리스트와 스택을 활용해 풀 수 있는 문제다. Node 클래스를 만들고, 해당 클래스가 값과 prev, next 프로퍼티를 참조하도록 선언한다. 더블 링크드 리스트를 생성한다. curNode는 현재 가리키고 있는 Node를 의미한다. cmd에 대한 반복문을 처리한다. 3-1. ‘U’: count 만큼 이동하며 curNode를 prev로 바꿔준다. 3-2. ‘D’: count 만큼 이동하며 curNode를 next로 바꿔준다.…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/81303\">코딩테스트 연습 - 표 편집</a></p>\n<h3 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h3>\n<p><strong>&#x3C;풀이 방법></strong></p>\n<p>더블 링크드 리스트와 스택을 활용해 풀 수 있는 문제다. Node 클래스를 만들고, 해당 클래스가 값과 prev, next 프로퍼티를 참조하도록 선언한다.</p>\n<ol>\n<li>더블 링크드 리스트를 생성한다.</li>\n<li>curNode는 현재 가리키고 있는 Node를 의미한다.</li>\n<li>cmd에 대한 반복문을 처리한다.</li>\n</ol>\n<p>3-1. ‘U’: count 만큼 이동하며 curNode를 prev로 바꿔준다.</p>\n<p>3-2. ‘D’: count 만큼 이동하며 curNode를 next로 바꿔준다.</p>\n<p>3-3. ‘C’: curNode를 stack에 넣고, prev와 next를 상호 연결시켜주고, curNode를 prev 또는 next로 변경시켜준다.</p>\n<p>3-4. ‘Z’: 가장 마지막으로 제거한 요소를 stack으로부터 pop하고, pop한 노드의 prev와 next를 다시 자신에 맞게 연결한다.</p>\n<ol>\n<li>answer을 모두 ‘O’값을 갖도록 선언한다.</li>\n<li>stack을 순회하면서 stack에 존재한다면 제거된 노드를 의미하기 때문에 answer의 해당 index의 값을 ‘X’로 변경시켜준다.</li>\n<li>answer를 리턴한다.</li>\n</ol>\n<h3 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> cmd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> curNode <span class=\"token operator\">=</span> start\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node\n    node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> curNode\n    curNode <span class=\"token operator\">=</span> node\n  <span class=\"token punctuation\">}</span>\n  curNode <span class=\"token operator\">=</span> start\n\n  <span class=\"token comment\">// curNode를 행번호가 k인 노드로 변경</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next\n    count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> element <span class=\"token keyword\">of</span> cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    step <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>prev\n        count<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next\n        count<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// stack</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 이전 노드와 다음 노드에 대한 설정</span>\n      <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>prev\n      <span class=\"token keyword\">const</span> nextNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode<span class=\"token punctuation\">)</span> prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nextNode\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span> nextNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prevNode\n\n      <span class=\"token comment\">// 현재 노드 설정</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span> curNode <span class=\"token operator\">=</span> nextNode\n      <span class=\"token keyword\">else</span> curNode <span class=\"token operator\">=</span> prevNode\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> recoveredNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> recoveredNode<span class=\"token punctuation\">.</span>prev\n      <span class=\"token keyword\">const</span> nextNode <span class=\"token operator\">=</span> recoveredNode<span class=\"token punctuation\">.</span>next\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode<span class=\"token punctuation\">)</span> prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> recoveredNode\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span> nextNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> recoveredNode\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>value\n    answer<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h3>\n<p>처음 문제를 풀 때는 설마 연결리스트로 풀겠어? 라고 생각하면서 배열로 풀었는데 시간 초과때문에 통과할 수 없었다. 최근에 연결 리스트를 직접 구현해본적이 있어서 접근 방법을 알고 나서는 어렵지 않게 풀 수 있었다.</p>","frontmatter":{"title":"[PG] 카카오 표 편집 (Node.js)","date":"May 02, 2022"}}},"pageContext":{"slug":"/PS/PG Level3 표 편집/","previous":{"fields":{"slug":"/운영체제/메모리 관리 전략 (2)/"},"frontmatter":{"title":"운영체제 : 메모리 관리 전략 (2)"}},"next":{"fields":{"slug":"/회고/4월 5주차 회고/"},"frontmatter":{"title":"4월 5주차 회고"}}}},"staticQueryHashes":["2486386679","3128451518"]}