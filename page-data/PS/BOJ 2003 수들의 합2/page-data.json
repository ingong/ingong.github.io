{"componentChunkName":"component---src-templates-blog-post-js","path":"/PS/BOJ 2003 수들의 합2/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"0a25dd04-7d92-5f80-a807-9982fea23d4b","excerpt":"문제 2003번: 수들의 합 2 문제 풀이 문제의 제한 조건 중 M 이 3억이다. 이는 절대로 O(N^2) 으로는 문제를 푸지 못한다는 것을 알려준다. 이는 투포인터로 살펴보면서 풀어야한다. 배열의 Element를 가르키는 start 와 end 를 증가시키면서 배열을 탐색한다. start 는 항상 end 보다 작거나 같아야하며, end 가 가르키는 값은 부분합에 포함되지 않는다. 부분합을 저장하는 변수를 따로 둔다. 만약 부분 합의 값이 M 보다 크다면 start 의 index 를…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><a href=\"https://www.acmicpc.net/problem/2003\">2003번: 수들의 합 2</a></p>\n<h2 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<p>문제의 제한 조건 중 M 이 3억이다. 이는 절대로 O(N^2) 으로는 문제를 푸지 못한다는 것을 알려준다. 이는 투포인터로 살펴보면서 풀어야한다. 배열의 Element를 가르키는 start 와 end 를 증가시키면서 배열을 탐색한다. start 는 항상 end 보다 작거나 같아야하며, end 가 가르키는 값은 부분합에 포함되지 않는다.</p>\n<p>부분합을 저장하는 변수를 따로 둔다. 만약 부분 합의 값이 M 보다 크다면 start 의 index 를 1 만큼 증가시키고 해당 값을 부분 합에서 빼준다. 그렇지 않다면 end를 1 만큼 증가시키고 기존에 end가 가르켰던 element의 값이 가르켰던 값만큼을 더해준다. 해당 조건문이 종료된 후에는 부분합의 값이 target인 M과 같은지를 확인하고 같다면 count를 증가시켜준다. 그리고 만약 end Index가 N에 도달한 경우에는 더 이상 탐색할 필요가 없기 때문에 while 문을 탈출한다. 왜냐하면 이미 target에 해당하는 값보다 큰 경우는 존재하지 않으며 start를 늘려갈 수록 이미 부분합에 대응하는 값보다 무조건 작아지기 때문이다.</p>\n<h2 id=\"문제-회고\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%9A%8C%EA%B3%A0\" aria-label=\"문제 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 회고</h2>\n<p>네이버 공채 문제에서 크기를 확인하지 않고 Combination으로 풀었던 아픈 기억이 떠올랐던 문제다! 그 때도 투포인터에 대해서도 알고 있고 문제도 풀어봤지만 완전히 이해하지 못했었다는 것을 해당 유형의 문제를 풀면서 느끼고 있다. 요즘은 부족한 점을 하나씩 깨닫는 재미에 공부를 하고 있는 것 같다!</p>\n<h2 id=\"소스-코드\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C\" aria-label=\"소스 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소스 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BAEKJOON</span>\n<span class=\"token comment\">// const input = require('fs').readFileSync('/dev/stdin').toString().trim().split('\\n');</span>\n<span class=\"token comment\">// VSCODE : TEST_CASE 폴더 생성 후, 원하는 테스트 케이스를 index.txt 에 작성</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TESTCASE/index.txt'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    end <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">>=</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">-=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>start<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">===</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span> result <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>end<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">===</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[BOJ 2003] 수들의 합 2(Node.js)","date":"March 20, 2022"}}},"pageContext":{"slug":"/PS/BOJ 2003 수들의 합2/","previous":{"fields":{"slug":"/PS/BOJ 14891 톱니바퀴/"},"frontmatter":{"title":"[BOJ 14891] 톱니바퀴 (Node.js)"}},"next":{"fields":{"slug":"/React/React.js : JSX/"},"frontmatter":{"title":"Build your Own React: JSX"}}}},"staticQueryHashes":["2486386679","3128451518"]}