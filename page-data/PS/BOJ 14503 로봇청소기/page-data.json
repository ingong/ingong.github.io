{"componentChunkName":"component---src-templates-blog-post-js","path":"/PS/BOJ 14503 로봇청소기/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"d2646b22-5d45-5efe-95aa-2ac98df121e4","excerpt":"문제 14503번: 로봇 청소기 문제 풀이 구현문제이다. 문제에서 주어진 조건에 맞게 실수없이 구현하면 되는 문제다. Recap 방향 전환 방향 전환을 index로 처리하는 방법을 활용했다. 크게 방향 전환은 내가 현재 바라보고 있는 방향에서 왼쪽으로 회전하는 경우가 있다. 문제에서는 북은 0, 동은 1, 남은 2, 서는 3으로 지정해줬다. 현재 북쪽을 바라본다고 가정한다면 왼쪽은 서쪽 방향이다. 이 때는 dir은…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><a href=\"https://www.acmicpc.net/problem/14503\">14503번: 로봇 청소기</a></p>\n<h2 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<p>구현문제이다. 문제에서 주어진 조건에 맞게 실수없이 구현하면 되는 문제다.</p>\n<h2 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<ul>\n<li>방향 전환</li>\n</ul>\n<p>방향 전환을 index로 처리하는 방법을 활용했다. 크게 방향 전환은 내가 현재 바라보고 있는 방향에서 왼쪽으로 회전하는 경우가 있다. 문제에서는 북은 0, 동은 1, 남은 2, 서는 3으로 지정해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> dir <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>현재 북쪽을 바라본다고 가정한다면 왼쪽은 서쪽 방향이다. 이 때는 dir은 3 을 가져야한다. 서쪽에서 한 번 더 왼쪽으로 회전하면 남쪽 방향을 바라보게 되고 이 때 dir 은 2 를 가져야한다. 규칙에 근거해 식을 세워보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">dir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span></code></pre></div>\n<p>나머지 연산자를 활용해 쉽게 방향전환을 할 수 있었다.</p>\n<ul>\n<li>초기 위치 값 지정</li>\n</ul>\n<p>문제의 조건에서 <code class=\"language-text\">(r, c)</code> 를 북쪽에서 r칸, 서쪽에서 c칸 떨어진 위치라고 설명했다. 이는 index가 0부터 시작된다는 의미이다. 첫 번째 열이나 행은 0칸 떨어진 값을 갖기 때문이다. 처음에 착각해서 초기 조건값을 제대로 입력하지 못했고 이를 기억하기 위해 기록해본다.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BAEKJOON</span>\n<span class=\"token comment\">// const input = require('fs').readFileSync('/dev/stdin').toString().trim().split('\\n');</span>\n<span class=\"token comment\">// VSCODE : TEST_CASE 폴더 생성 후, 원하는 테스트 케이스를 index.txt 에 작성</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TESTCASE/index.txt'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">solution</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  visited<span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">let</span> queueIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queueIndex <span class=\"token operator\">&lt;</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>queueIndex<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> dir <span class=\"token operator\">=</span> d\n    <span class=\"token keyword\">let</span> isCleanable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nx <span class=\"token operator\">></span> <span class=\"token constant\">N</span> <span class=\"token operator\">||</span> ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> ny <span class=\"token operator\">></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      visited<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      isCleanable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isCleanable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> backDir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>bx<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>backDir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>backDir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>bx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>by<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>bx<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    queueIndex<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> answer<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[BOJ 14503] 로봇 청소기 (Node.js)","date":"March 23, 2022"}}},"pageContext":{"slug":"/PS/BOJ 14503 로봇청소기/","previous":{"fields":{"slug":"/JS/Async-Await/"},"frontmatter":{"title":"Async-await"}},"next":{"fields":{"slug":"/PS/BOJ 1939 중량 제한/"},"frontmatter":{"title":"[BOJ 1939] 중량 제한 (Node.js)"}}}},"staticQueryHashes":["2486386679","3128451518"]}