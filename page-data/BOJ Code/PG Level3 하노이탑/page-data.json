{"componentChunkName":"component---src-templates-blog-post-js","path":"/BOJ Code/PG Level3 하노이탑/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"868e355b-a5b8-52b0-b0d3-125b1518d593","excerpt":"문제 코딩테스트 연습 - 하노이의 탑 풀이 대표적인 재귀 함수로 풀 수 있는 문제이다. 재귀적으로 사고해서 문제를 푸는 것이 중요하다. 재귀 문제는 재귀 함수를 정의하는 과정이 중요한데 그 함수를 정의하는 과정에 대해서 먼저 알아보자. 재귀 함수는 크게 2가지 조건을 만족시켜야한다. 먼저, 특정 입력에 대해서는 자기 자신을 호출하지 않고 종료되어야한다(base condition). 두 번째는 모든 입력이 base condition…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/12946\">코딩테스트 연습 - 하노이의 탑</a></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>대표적인 재귀 함수로 풀 수 있는 문제이다. 재귀적으로 사고해서 문제를 푸는 것이 중요하다.</p>\n<p>재귀 문제는 재귀 함수를 정의하는 과정이 중요한데 그 함수를 정의하는 과정에 대해서 먼저 알아보자. 재귀 함수는 크게 2가지 조건을 만족시켜야한다. 먼저, 특정 입력에 대해서는 자기 자신을 호출하지 않고 종료되어야한다(base condition). 두 번째는 모든 입력이 base condition에 수렴해야한다.</p>\n<p>이를 위해서는 함수의 인자로 어떤 것을 받고 어디까지 계산한 후 자기 자신에게 넘겨줄 지를 명확하게 정의해야한다. 하노이 탑 문제도 어떠한 인자를 전달해야하는지 생각하는게 어려웠던 문제다. 크게 3가지 단계로 나눠서 문제를 풀었다.</p>\n<p>먼저, 함수는 n개의 원판을 A기둥에서 C기둥으로 옮기는 방법을 출력하는 함수여야한다. 따라서 인자로는 원판의 개수와 기둥의 번호를 받는다. 두 번째로, base condition은 n = 0인 경우와 n = 1인 경우로 나눠서 생각해볼 수 있다. 이번 풀이에서는 n = 1인 경우를 생각하고 문제를 풀었다. 마지막은 가장 중요한 재귀식이다. 먼저 n - 1개의 원판을 기둥 A기둥에서 B기둥으로 이동시킨다. 그리고 n번 원판을 A기둥에서 C기둥으로 이동시킨다. 이후에는 B기둥에 옮겨둔 n - 1 개의 원판을 B기둥에서 C기둥으로 이동시킨다. 생각보다 간단하다. 하지만 재귀적으로 접근하지않고 원판 하나 하나의 이동시에 발생하는 경우에 대해 생각하는 절차지향 접근을 선택했다면 쉽게 풀리지 않는다.</p>\n<p>결국 1개의 원판을 이동시키는 것이 가능하고, k-1개의 원판을 이동시키는게 가능하다면 k개의 원판을 이동시킬 수 있다는 가정이 참이기 때문에 이 문제는 재귀로 풀 수 있다.</p>\n<h2 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>저번에도 하노이 탑 문제를 풀었었는데 다시 푸는데 또 어려움을 느꼈던 걸 생각해보면 그 때는 제대로 이해를 못했던 것 같다. 지금처럼 꾸준하게 내가 이해한 언어로 글을 쓰는 습관을 유지해야겠다.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>\n    answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[PG] 하노이 탑 (Node.js)","date":"March 28, 2022"}}},"pageContext":{"slug":"/BOJ Code/PG Level3 하노이탑/","previous":{"fields":{"slug":"/BOJ Code/BOJ 9935 문자열 폭발/"},"frontmatter":{"title":"[백준 9935] 문자열 폭발 (Node.js)"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}