{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/Async-Await/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"dcadb7fc-7866-5b7b-9d30-b69cca84cf0a","excerpt":"Async-await 는 ECMAScript 2017에서 표준으로 정의된 키워드이다. 비동기 프로그래밍을 동기 방식처럼 직관적으로 표현할 수 있다는 장점이 있다. 비동기가 들어간 비지니스 로직은 중첩될수록 그 복잡도가 기하 급수적으로 늘어나고. 이를 간결하게 한다는 것은 유지보수와 생산성의 향상으로 귀결된다. 결과적으로  ,  가 ES2015 에 포함되었고,  가 ES201…","html":"<p>Async-await 는 ECMAScript 2017에서 표준으로 정의된 키워드이다. 비동기 프로그래밍을 동기 방식처럼 직관적으로 표현할 수 있다는 장점이 있다. 비동기가 들어간 비지니스 로직은 중첩될수록 그 복잡도가 기하 급수적으로 늘어나고. 이를 간결하게 한다는 것은 유지보수와 생산성의 향상으로 귀결된다. 결과적으로 <code class=\"language-text\">promsie</code> , <code class=\"language-text\">generator</code> 가 ES2015 에 포함되었고, <code class=\"language-text\">async-await</code> 가 ES2017 로 포함되었다.</p>\n<p>물론 최신 문법은 우리가 좀 더 편하게 개발할 수 있다는 장점도 있지만, 개발자는 다양한 환경에서 코드가 동작할 수 있도록 신경을 써야한다. 대부분이 경험했듯이 바벨이 우리의 수고를 덜어주는 역할을 해준다. 이는 브라우저 환경에 맞게 코드를 트랜스파일링하고, 필요한 경우에는 폴리필을 제공하여 정상 동작을 지원한다. 즉, 우리가 이번에 다룰 <code class=\"language-text\">async-await</code> 도 예외가 아니다. 그렇다면 이제 <code class=\"language-text\">async-await</code> 에 대해서 좀 더 알아보자. 이 구현체에는 <code class=\"language-text\">generator</code> 와 <code class=\"language-text\">promise</code> 에 대한 내용이 깊게 관여한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ES7</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES5 compiled</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _ref <span class=\"token operator\">=</span> <span class=\"token function\">_asyncToGenerator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_ref</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">async</code> 키워드를 <code class=\"language-text\">generator</code> 로 바꾸고, <code class=\"language-text\">await</code> 키워드는 <code class=\"language-text\">yield</code> 로 바꾸었다. <code class=\"language-text\">generator</code> 는 <code class=\"language-text\">yield</code> 를 만날 때까지 실행되고, 해당 컨텍스트는 저장된 상태로 남아있게 된다. 따라서 비동기 로직이 종료되었을 때 적절하게 <code class=\"language-text\">next()</code> 를 호출해주면 <code class=\"language-text\">async-await</code> 함수가 완성된다.</p>\n<p>그러나 <code class=\"language-text\">await</code> 키워드가 붙은 <code class=\"language-text\">bar()</code> 함수의 작업이 종료되는 시점은 <code class=\"language-text\">bar()</code> 함수밖에 모른다. 그렇다고 <code class=\"language-text\">next()</code> 를 <code class=\"language-text\">bar()</code> 함수 내에서 실행하게 되면 의존성이 생기게 된다. 그렇다면 어떻게 의존성을 분리할 수 있을까? 이 문제를 해결하기 위해 사용된 것이 promise 다. Babel은 promise와 재귀함수를 이용하여 <code class=\"language-text\">next()</code>를 대신 호출해주는 함수를 만드는데, 그게 바로 <code class=\"language-text\">_asyncToGenerator</code>이다. 다음 코드를 먼저 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">_asyncToGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throw'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">fn.apply</code>를 실행하여 인자로 넘어온 generator를 실행하여 iterator 객체를 클로저로 저장해둔다. 나머지는 클로저에 저장한 iterator를 실행시키고, 반환된 promise객체를 재귀함수(여기서는 <code class=\"language-text\">step</code>)를 통해 반복해서 실행시켜 주는 것이다.</p>\n<p>정리하자면 generator는 비동기적 패턴을 yield를 통해 동기적인 “모습”으로 바꾸어주고, promise는 generator로 만든 iterator를 반복해서 실행해주는 역할을 한다. await keyword에 사용하는 함수가 항상 promise를 반환해야하는 이유가 여기에 있다.</p>","frontmatter":{"title":"Async-await","date":"March 22, 2022"}}},"pageContext":{"slug":"/JS/Async-Await/","previous":{"fields":{"slug":"/FrontEnd/웹접근성과웹표준/"},"frontmatter":{"title":"웹 접근성과 표준"}},"next":{"fields":{"slug":"/BOJ Code/BOJ 14503 로봇청소기/"},"frontmatter":{"title":"[BOJ 14503] 로봇 청소기 (Node.js)"}}}},"staticQueryHashes":["2486386679","3128451518"]}