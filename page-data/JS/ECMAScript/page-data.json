{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/ECMAScript/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"3e53f7f3-c8d8-5373-b1ad-b495748418ef","excerpt":"TL;DR ECMAScript 와 JavaScript 에 대한 차이에 대해서 알아보자. ECMAScript 가 스크립트 언어에 대한 표준이며, JavaScript 가 스크립트 언어 중 하나라는 건 알고 있지만, 그 이상은 알지 못하는 게 개인적으로 아쉬웠다. 이 궁금증을 해소하기 위해 여러 블로그를 찾아보면서 정리해보았다. 간략하게 용어에 대해 정리하는 방식으로 글을 작성해보려고 한다. Ecma 인터내셔널 (Ecma International) Ecma…","html":"<h3 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h3>\n<p>ECMAScript 와 JavaScript 에 대한 차이에 대해서 알아보자. ECMAScript 가 스크립트 언어에 대한 표준이며, JavaScript 가 스크립트 언어 중 하나라는 건 알고 있지만, 그 이상은 알지 못하는 게 개인적으로 아쉬웠다. 이 궁금증을 해소하기 위해 여러 블로그를 찾아보면서 정리해보았다. 간략하게 용어에 대해 정리하는 방식으로 글을 작성해보려고 한다.</p>\n<h2 id=\"ecma-인터내셔널-ecma-international\" style=\"position:relative;\"><a href=\"#ecma-%EC%9D%B8%ED%84%B0%EB%82%B4%EC%85%94%EB%84%90-ecma-international\" aria-label=\"ecma 인터내셔널 ecma international permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ecma 인터내셔널 (Ecma International)</h2>\n<p>Ecma 인터내셔널은 정보 통신에 대한 표준을 제정하는 비영리 표준화 기구이다. 이 기구가 정의한 표준들은 다음과 같다.\nex) C# 언어 규격, CD 롬 볼륨과 파일구조, JSON 포맷 등\n각각의 표준은 번호를 가지고 있으며 JS 에 관련해서 우리가 알아야 하는 표준은 ECMA-262 이다.</p>\n<h3 id=\"ecma-262\" style=\"position:relative;\"><a href=\"#ecma-262\" aria-label=\"ecma 262 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMA-262</h3>\n<p>ECMA-262 는 범용 목적의 스크립트 언어에 대한 명세를 담고 있다. 그렇다면 스크립트 언어는 어떻게 정의할 수 있을까? 스크립트 언어에 대한 정의를 알아보자</p>\n<h3 id=\"스크립트-언어\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4\" aria-label=\"스크립트 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 언어</h3>\n<p>스크립트 언어는 독립된 시스템에서 작동하도록 설계된 프로그래밍 언어이다. 즉, 독립된 시스템에서 작동되기 위한 언어이다. 다음은 Michael Aranda 의 What’s the difference between JavaScript and ECMAScript 글 번역본이다.</p>\n<blockquote>\n<p>스크립트 언어에 포함되는 프로그래밍 언어들은 독립된 시스템을 위해 존재합니다. 예를 들어, <em>이동하기, 달리기, 점프하기</em>라는 명령어를 여러분들이 사용할 수 있다고 생각해봅시다. 그렇다면 사람이나 개, 아니면 게임 캐릭터처럼 여러분들의 명령을 입력받고, 실행할 수 있는 무언가가 있어야 하겠죠? 만약 <em>이동하고, 달리고, 점프</em>를 할 수 있는 것들이 없다면 명령어는 아무 쓸모가 없겠죠.</p>\n</blockquote>\n<p>여기서 찾을 수 있는 스크립트 언어의 특징으로는 응용 프로그램과 독립적이며, 사용자가 직접 프로그램을 의도에 따라 동작시킬 수 있다는 것이다. 스크립트 언어를 이용한 명령어의 실행이 시스템 내부에서 어떤 원리로 동작하는지는 전혀 상관하지 않는다. JS 가 브라우저에서 동작할 때, 브라우저의 내부 동작 원리와의 무관하게 동작하는 원리를 하나의 예시로 들 수 있다.</p>\n<h2 id=\"ecmascript\" style=\"position:relative;\"><a href=\"#ecmascript\" aria-label=\"ecmascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript</h2>\n<p><code class=\"language-text\">ECMAScript</code> 는 ECMA-262 기술 규격에 의해 정의된 범용 스크립트 언어이다. 동의어로는 EMCAScript 사양 (ECMAScript specification) 이 있다. 우리가 ECMA 스펙이라고 했던 개념도 결국 <code class=\"language-text\">ECMAScript</code> 를 이야기하는 것이였다. <code class=\"language-text\">ECMAScript</code> 는 ECMA-262 에서 정의된 하나의 사양을 의미한다. <code class=\"language-text\">ECMAScript</code>는 스크립트 언어가 준수해야 하는 규칙, 세부 사항 및 지침을 제공한다.</p>\n<blockquote>\n<p>이해가 어렵다면 좀 더 쉬운 예시를 들어보죠. 우리가 일상생활에서 쓰는 언어의 기준이 되는 국어를 <em>표준어</em>라고 부르고, <em>국립국어원</em>에서 관리하고 있습니다. 그리고 표준어는 국립국어원에서 제정한 <em>여러가지 규칙들</em>(대표적으로 발음이나 맞춤법)을 일정한 원리를 따르고 있습니다.</p>\n</blockquote>\n<p>다음은 Michael Aranda 의 What’s the difference between JavaScript and ECMAScript 글 번역본이다.</p>\n<blockquote>\n<p>ECMAScript에서도 마찬가지이다. 국립국어원은 Ecma 인터내셔널, ECMA-262는 표준어고, ECMAScript는 맞춤법과 같은 규칙으로 생각한다면 보다 쉽게 이해할 수 있다. 즉, ECMA-262 이라는 표준어(기술규격)가 업데이트 될 때마다, 맞춤법에 비유되는 ECMAScript 도 그 규격에 맞게 업데이트되는 것이다.</p>\n</blockquote>\n<h2 id=\"javascript-ecmascript6-그리고-babel\" style=\"position:relative;\"><a href=\"#javascript-ecmascript6-%EA%B7%B8%EB%A6%AC%EA%B3%A0-babel\" aria-label=\"javascript ecmascript6 그리고 babel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript, ECMAScript6 그리고 Babel</h2>\n<h3 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript</h3>\n<p>JS 는 ECMAScript 스펙을 준수하는 범용 스크립트 언어이다. 또한 JS 는 ECMA 스펙에 포함되지 않는 확장 기능을 제공한다. 만약 ECMAScript 문서를 읽는다면 <strong>어떻게 스크립트 언어를 만들 수 있는지</strong>를 알 수 있다. 반면 JavaScript 문서를 읽게 된다면, <strong>어떻게 스크립트 언어를 쓸 수 있는지</strong>를 알 수 있다.</p>\n<h3 id=\"ecmascript-6\" style=\"position:relative;\"><a href=\"#ecmascript-6\" aria-label=\"ecmascript 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript 6</h3>\n<p>ECMAScript 6 는 ECMA-262 표준의 제 6 판이며, ECMAScript 사양의 주요 변경 사항 및 개선 사항을 명시한다. 동의어로는 ‘ES6’, ‘ES2015’, ‘ECMAScript 2015’가 있다. 국립국어원에서는 필요에 따라 표준어 규칙을 바꾸거나 새로운 단어를 표준어에 추가하기도 한다. Ecma 역시 마찬가지로, 필요성에 따라 ECMAScript를 개정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">let</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">,</span> arrow functions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span> parameters<span class=\"token punctuation\">,</span> destructuring<span class=\"token punctuation\">,</span>\nobject initialize<span class=\"token punctuation\">,</span> template literals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">,</span> spread<span class=\"token punctuation\">,</span>\nrest parameter<span class=\"token punctuation\">,</span> Set <span class=\"token operator\">&amp;</span> Map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">import</span><span class=\"token operator\">/</span><span class=\"token keyword\">export</span> 키워드</code></pre></div>\n<h3 id=\"바벨babel\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%B2%A8babel\" aria-label=\"바벨babel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바벨(Babel)</h3>\n<p>ES2015에 도입된 새로운 기술들을 사용할 수 있었지만, 호환성 문제 때문에 이 기술을 손 쉽게 사용하기는 어려웠다. 이를 해결하기 위해 바벨이 등장했다. <code class=\"language-text\">바벨</code>은 현재 및 이전 브라우저나 환경에서 ES2015+ 사양으로 작성된 코드를 하위 호환 버전의 JS 로 변환해주는 도구이다.</p>\n<p><code class=\"language-text\">바벨</code>은 파싱과 출력만 담당하며, 변환 작업은 <code class=\"language-text\">플러그인</code>에게 위임하며, 이 목적에 맞는 <code class=\"language-text\">플러그인</code>들을 세트로 모아놓은 것을 <code class=\"language-text\">프리셋</code>이라고 한다. 우리는 목적에 부합도록 플러그인과 프리셋을 설정한다면, ES2015+ 사양으로 코드를 작성할 수 있으며, 바벨은 ECMAScript5 버전으로 변환한다.\n하지만 ECMAScript5 버전 이전으로 변환되지 못하는 코드들도 존재한다. 이러한 코드들을 <code class=\"language-text\">“폴리필”</code> 이라는 코드 조각을 추가해서 해결한다. 다음은 폴리필 사용 설정의 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// babel.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        useBuiltIns<span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 폴리필 사용 방식 지정</span>\n        corejs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 폴리필 버전 지정</span>\n          version<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">바벨</code>은 우리는 일관적인 방식으로 코딩하면서, 다양한 브라우저에서 돌아가는 어플리케이션을 만들기 위한 도구이다. <code class=\"language-text\">바벨</code>의 코어는 파싱과 출력만 담당하고, 변환 작업은 <code class=\"language-text\">플러그인</code>이 처리한다. 여러 개의 플러그인들을 모아놓은 세트를 <code class=\"language-text\">프리셋</code>이라고 하는데 ECMAScript+ 환경은 env 프리셋을 사용한다.</p>\n<p>바벨이 변환하지 못하는 코드는 <code class=\"language-text\">폴리필</code>이라 부르는 코드조각을 불러와 결과물에 로딩해서 해결한다. babel-loader로 웹팩과 함께 사용하면 훨씬 단순하고 자동화된 프론트엔드 개발환경을 갖출 수 있다.</p>","frontmatter":{"title":"ECMAScript","date":"March 01, 2022"}}},"pageContext":{"slug":"/JS/ECMAScript/","previous":{"fields":{"slug":"/JS/iterable, iterator, generator/"},"frontmatter":{"title":"iterable, iterator, generator"}},"next":{"fields":{"slug":"/백준 알고리즘/BOJ 11055 가장 큰 증가하는 부분 수열/"},"frontmatter":{"title":"BOJ 11055 가장 큰 증가하는 부분수열"}}}},"staticQueryHashes":["2486386679","3128451518"]}