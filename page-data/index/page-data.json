{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"문제 코딩테스트 연습 - 괄호 회전하기 문제 풀이 문자열을 왼쪽으로 회전시키면서 올바른 괄호인지 판별하는 문제다. 회전하지 않은 문자열에 대해서도 올바른 괄호인지 판별해야하기 때문에 먼저 올바른 괄호인지 여부를 판단한다. 그리고로 배열의 맨 앞 요소를 꺼내고, 이를 맨 뒤에 넣어준다. 그리고 count 를 1씩 증가시켜준다. 배열의 길이와 같아지면 whi…","fields":{"slug":"/PS/PG Level2 괄호회전하기/"},"frontmatter":{"date":"April 08, 2022","title":"[PG Level2] 괄호 회전하기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 2230번: 수 고르기 문제 풀이 두 수를 선택했을 때 차이가 M 이상이면서 가장 작은 차이를 반환하는 문제이다. 시작점이 같은 투포인터로 문제를 풀 수 있다. 먼저 해당 배열을 정렬한다. while문에서는 차이가 M 초과인 경우에는 start를 증가시키고, M 미만이라면 end를 증가시킨다. 차이를 산출했을 때 M 이 넘는다면 이전에 answer …","fields":{"slug":"/PS/BOJ 2230 수고르기/"},"frontmatter":{"date":"April 08, 2022","title":"[백준 2230] 수 고르기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1937번: 욕심쟁이 판다 문제 풀이 BFS로 풀었을 때는 시간초과로 통과를 받지 못한 문제이다. 이는 Dynamic Programming을 통해서 풀 수 있다.  의 의미는 판다가 (a, b)의 위치에 있을 때 최대로 방문할 수 있는 칸이 c임을 의미한다. 재귀호출을 통해서 문제를 해결할 수 있다. DFS를 통해서 상하좌우 중 탐색할 수 있는 좌표…","fields":{"slug":"/PS/BOJ 1937 욕심쟁이판다/"},"frontmatter":{"date":"April 07, 2022","title":"[백준 1937] 욕심쟁이 판다 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 코딩테스트 연습 - 후보키 문제 풀이 다음 조건을 만족하는 후보키의 개수를 산출하는 문제다. 관계 데이터베이스에서 릴레이션(Relation)의 튜플(Tuple)을 유일하게 식별할 수 있는 속성(Attribute) 또는 속성의 집합 중, 다음 두 성질을 만족하는 것을 후보 키(Candidate Key)라고 한다. 유일성(uniqueness) : 릴레이…","fields":{"slug":"/PS/PG Level2 후보키/"},"frontmatter":{"date":"April 06, 2022","title":"[PG Level2] 후보키 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 코딩테스트 연습 - 최고의 집합 자연수 n 개로 이루어진 중복 집합(multi set, 편의상 이후에는 “집합”으로 통칭) 중에 다음 두 조건을 만족하는 집합을 최고의 집합이라고 합니다. 각 원소의 합이 S가 되는 수의 집합 위 조건을 만족하면서 각 원소의 곱 이 최대가 되는 집합 집합의 원소의 개수 n과 모든 원소들의 합 s가 매개변수로 주어질 때…","fields":{"slug":"/PS/PG Level3 최고의집합/"},"frontmatter":{"date":"April 05, 2022","title":"[PG Level3] 최고의 집합 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"concepts 비교 연산자는 피연산자를 서로 비교하고, 비교 결과가 참인지에 따라 논리 값을 반환한다. 피연산자로는 숫자, 무낮열, 논리형, 객체 값을 사용할 수 있다. 문자열은 Unicode 값을 사용한 표준 사전식 순서를 기반으로 비교한다. 만약 두 피연산자가 서로 다른 타입일 경우 JavaScript가 피연산자를 비교하기에 적합한 타입으로 변환한다…","fields":{"slug":"/JS/== 과 ===/"},"frontmatter":{"date":"April 04, 2022","title":"ECMASCript 스펙보면서 ==과 ===의 차이 이해하기","category":"JS","draft":false}}},{"node":{"excerpt":"이번 포스팅에서는 에 대해서 살펴보려고 한다. concepts 과거의 웹사이트들은 대부분 SSR로 동작했기 때문에 페이지가 여러 개로 구성된 Multi Page Form 방식을 사용했다. 하지만 스마트폰이 등장하면서 사용자들으 모바일 앱과 같은 사용성을 기대했다. 따라서 모바일 앱과 같은 형태의 웹페이지가 필요하게 됐다. 이를 해결하기 위해서 React,…","fields":{"slug":"/React/Next.js: SSR과 DataFetching/"},"frontmatter":{"date":"April 01, 2022","title":"Next.js: SSR과 Next.js의 DataFetching","category":"React","draft":false}}},{"node":{"excerpt":"이 포스팅은 Build your own React 를 읽고 학습한 내용을 정리한 글 입니다. concepts 브라우저(렌더러 프로세스)의 메인 스레드는 변경 사항을 사용자의 화면에 적용하는 역할을 수행한다. 변경 사항은 CSS, 사용자 입력, 자바스크립트 등에 의해 유발될 수 있다. 현대의 디바이스에서는 최고의 사용자 경험을 제공하기 위해 초당 60프레임…","fields":{"slug":"/React/Build Your Own React : ConcurrentMode와 Fiber/"},"frontmatter":{"date":"April 01, 2022","title":"Build your own React: Concurrent Rendering과 Fiber","category":"React","draft":false}}},{"node":{"excerpt":"문제 코딩테스트 연습 - 양궁대회 문제 풀이 처음에는 어떻게 풀어야할지 막막했는데 DFS를 활용해 문제를 푸는 방식이였다. n, index, array를 인자로 갖는 함수를 작성하고 재귀 호출하도록 작성했다. 처음에는 n이 0이 될 때 DFS를 종료하도록 조건을 작성했는데 모든 테스트 케이스는 통과했지만 마지막 네 번째 테스트 케이스는 통과하지 못했다. …","fields":{"slug":"/PS/PG Level2 양궁/"},"frontmatter":{"date":"March 31, 2022","title":"[PG Level2] 카카오 양궁 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 18870번: 좌표 압축 문제 풀이 본인보다 작은 서로 다른 원소의 개수를 반환하는 문제이다. 문제의 제한 조건이 N이 1,000,000 이고 각각의 수에 대한 좌표 압축을 해야하기 때문에 선형 탐색의 방식으로는 문제를 풀 수 없다. 따라서 lowerBound를 활용해 해당 값이 나오는 최초 index를 반환하도록 문제를 풀었다. 문제에서는 무조건 …","fields":{"slug":"/PS/BOJ 18870 좌표압축/"},"frontmatter":{"date":"March 31, 2022","title":"[BOJ 18870] 좌표 압축 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"이번 글에서는 해싱에 대해서 살펴보려고 한다. 해시 테이블과 이를 활용해 충돌을 해결하는 방법은 이전 선형 자료 구조에 대한 고찰에서 살펴봤다. 따라서 이번 글에서는 해시테이블에 대해서 간단하게 살펴보고, 해시 충돌 완화를 위한 해시 함수에 대해서 살펴보려고 한다. concepts 해시 함수란 데이터의 효율적 관리를 목적으로 임의의 길이의 데이터를 고정된…","fields":{"slug":"/알고리즘/해시/"},"frontmatter":{"date":"March 31, 2022","title":"해싱, 해시 테이블 그리고 해시 함수","category":"알고리즘","draft":false}}},{"node":{"excerpt":"문제 코딩테스트 연습 - 순위 검색 문제 풀이 info를 순회하면서 해당 조건을 모두 만족시키는 경우의 수를 모두 만들어서 문자열로 합쳐준다. 이 때 Combination을 통해서 만들어준다. 해당 조건을 갖는 사원에 대한 정보는 총 16가지에 포함되도록 만들어 질 수 있다. 예를 들면 ,  등등 2^4 의 경우의 수를 갖는다. 따라서 이를 Combina…","fields":{"slug":"/PS/PG Level2 순위검색/"},"frontmatter":{"date":"March 29, 2022","title":"[PG Level2] 카카오 순위검색 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 코딩테스트 연습 - 하노이의 탑 풀이 대표적인 재귀 함수로 풀 수 있는 문제이다. 재귀적으로 사고해서 문제를 푸는 것이 중요하다. 재귀 문제는 재귀 함수를 정의하는 과정이 중요한데 그 함수를 정의하는 과정에 대해서 먼저 알아보자. 재귀 함수는 크게 2가지 조건을 만족시켜야한다. 먼저, 특정 입력에 대해서는 자기 자신을 호출하지 않고 종료되어야한다(b…","fields":{"slug":"/PS/PG Level3 하노이탑/"},"frontmatter":{"date":"March 28, 2022","title":"[PG] 하노이 탑 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 9935번: 문자열 폭발 문제 풀이 Stack을 활용해 문제를 풀 수 있다. 처음에  를 활용해서 푼 풀이는 푼 속도는 빨랐지만 소요시간이 거의 푼 사람들 중에서는 꼴찌였다. 다시 생각해서 문제를 풀었다. 문제의 조건으로 주어진 target 문자열의 마지막 길이를 기준으로 일치하는 문자열이 있는지를 string 을 순회해서 탐색하고, 만약 해당 문자…","fields":{"slug":"/PS/BOJ 9935 문자열 폭발/"},"frontmatter":{"date":"March 25, 2022","title":"[백준 9935] 문자열 폭발 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1780번: 종이의 개수 문제 풀이 분할 정복 유형의 문제이다. 재귀호출을 통해 문제를 풀었다. DFS호출 시 x, y 좌표와 size를 인자로 전달한다. 처음에는 전체 크기를 size로 전달한다. 종료조건은 크게 2가지로 나뉜다. 먼저, 크기가 1인 경우이다. 이 경우에는 더 이상 탐색이 불가능하기 때문에 해당하는 숫자만큼 answer에 값을 증가…","fields":{"slug":"/PS/BOJ 1780 종이의개수/"},"frontmatter":{"date":"March 25, 2022","title":"[BOJ 1780] 종이의 개수 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1753번: 최단경로 문제 풀이 한 정점에서 다른 모든 정점까지 가는데 걸리는 최단 경로의 값, 즉 최소 비용을 구하는 문제이다. 하나의 정점에서 다른 모든 정점까지 걸리는 최소비용을 구하는 알고리즘으로는 다익스트라와 벨만포드 알고리즘이 있는데, 이 문제에서는 음의 가중치가 없기 때문에 다익스트라로 해결할 수 있다. 먼저 Graph에 주어진 노드쌍과…","fields":{"slug":"/PS/BOJ 1753 최단경로/"},"frontmatter":{"date":"March 24, 2022","title":"[BOJ 1753] 최단경로 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1939번: 중량제한 문제 풀이 3가지 방법을 활용해 문제를 풀었다. 이분탐색과 BFS 이분탐색과 DFS DisjointSet BFS와 DFS로 문제를 풀 때는 해당 중량으로 가상의 트럭을 이동시켰을 때 시작점에서 도착지까지 도착할 수 있는지 여부를 판단한다. 이 때 도착할 수 있다면 중량을 증가시켜도되기 때문에 중량을 늘려준다. DFS의 경우에는 …","fields":{"slug":"/PS/BOJ 1939 중량 제한/"},"frontmatter":{"date":"March 24, 2022","title":"[BOJ 1939] 중량 제한 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 14503번: 로봇 청소기 문제 풀이 구현문제이다. 문제에서 주어진 조건에 맞게 실수없이 구현하면 되는 문제다. Recap 방향 전환 방향 전환을 index로 처리하는 방법을 활용했다. 크게 방향 전환은 내가 현재 바라보고 있는 방향에서 왼쪽으로 회전하는 경우가 있다. 문제에서는 북은 0, 동은 1, 남은 2, 서는 3으로 지정해줬다. 현재 북쪽을 …","fields":{"slug":"/PS/BOJ 14503 로봇청소기/"},"frontmatter":{"date":"March 23, 2022","title":"[BOJ 14503] 로봇 청소기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"Async-await 는 ECMAScript 2017에서 표준으로 정의된 키워드이다. 비동기 프로그래밍을 동기 방식처럼 직관적으로 표현할 수 있다는 장점이 있다. 비동기가 들어간 비지니스 로직은 중첩될수록 그 복잡도가 기하 급수적으로 늘어나고. 이를 간결하게 한다는 것은 유지보수와 생산성의 향상으로 귀결된다. 결과적으로  ,  가 ES2015 에 포함되었…","fields":{"slug":"/JS/Async-Await/"},"frontmatter":{"date":"March 22, 2022","title":"Async-await","category":"JS","draft":false}}},{"node":{"excerpt":"들어가며 인터넷 자체가 협업을 위해 만들어진 것입니다. 서로 멀리 떨어진 사람들의 머릿속에 있는 생각의 조각을 이어 하나의 해답을 찾을 수 있도록 하는 것이 내가 www 를 만든 목표였습니다. - 팀 버너스리 웹을 구성하는 중요 요소인 HTML 은 다양한 플랫폼과 장치에 독립적인 정보교환 수단을 제공하기 위해 탄생했습니다. 쉽게 말하면 웹은 원래부터 사용…","fields":{"slug":"/FrontEnd/웹접근성과웹표준/"},"frontmatter":{"date":"March 22, 2022","title":"웹 접근성과 표준","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"문제 1654번: 랜선 자르기 문제 풀이 이분탐색은 탐색 범위를 2개의 범위로 나누어 탐색하는 방법이다. 문제의 원하는 결과가 랜선의 최대 길이이기 때문에 이에 대한 이분 탐색을 진행한다. 모든 랜선을 해당 길이로 나누면 해당 개수가 나오고 그 합을 구하면 모든 갯수가 나온다. 만약 갯수가 원하는 갯수를 넘겼다면 최대의 길이를 보장하지 못한다는 것을 의미…","fields":{"slug":"/PS/BOJ 1654 랜선자르기/"},"frontmatter":{"date":"March 21, 2022","title":"[BOJ 1654] 랜선 자르기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"이 글은 Build your own React 를 학습하고 정리한 글 입니다. JSX JSX는 JS확장 문법이다. JSX를 활용하면 JS파일에 마크업을 포함시킬 수 있다.\n브라우저는 JS가 아닌 JSX를 해석할 수 없고, 빌드 전 Babel 과 같은 트랜스파일러를 활용하여 JS로 트랜스파일해줘야한다. Babel을 사용하면 @babel/plugin-tran…","fields":{"slug":"/React/Build Your Own React: JSX/"},"frontmatter":{"date":"March 20, 2022","title":"Build your own React: JSX","category":"React","draft":false}}},{"node":{"excerpt":"문제 2003번: 수들의 합 2 문제 풀이 문제의 제한 조건 중 M 이 3억이다. 이는 절대로 O(N^2) 으로는 문제를 푸지 못한다는 것을 알려준다. 이는 투포인터로 살펴보면서 풀어야한다. 배열의 Element를 가르키는 start 와 end 를 증가시키면서 배열을 탐색한다. start 는 항상 end 보다 작거나 같아야하며, end 가 가르키는 값은 …","fields":{"slug":"/PS/BOJ 2003 수들의 합2/"},"frontmatter":{"date":"March 20, 2022","title":"[BOJ 2003] 수들의 합 2(Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 14891번: 톱니바퀴 문제 풀이 톱니바퀴의 현재 상태를 리스트로 관리한다. 그리고 문제에서 주어진 회전 리스트를 순회하면서 조작한다. 회전하는 톱니바퀴의 좌측 톱니에 대해서는 좌측에 위치한 톱니바퀴의 우측 톱니와 비교하고, 톱니바퀴의 우측 톱니에 대해서는 우측에 위치한 톱니바퀴의 좌측 톱니와 비교한다. 이 때 해당 값이 다르다면 회전을 시키고 이 …","fields":{"slug":"/PS/BOJ 14891 톱니바퀴/"},"frontmatter":{"date":"March 20, 2022","title":"[BOJ 14891] 톱니바퀴 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 14499번: 주사위 굴리기 문제 풀이 Commands 를 순회하면서 주사위의 위치를 변경시켜준다. 범위에서 벗어난 경우 결과값에 포함시키지 않아야하므로 조건을 확인한다. 주사위를 변경시켜준다. 주사위를 회전시킬 때 실제 주사위를 회전하는게 아닌 해당 index 의 값들을 변경해준다. 크게 4가지 방향이 존재하지만 동, 서 / 북, 남은 규칙이 유사…","fields":{"slug":"/PS/BOJ 14499 주사위굴리기/"},"frontmatter":{"date":"March 18, 2022","title":"[BOJ 14499] 주사위 굴리기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"최근에 실패를 경험한 후 ‘나는 과연 리액트에 대해 깊이있게 이해하고 React라는 기술을 사용하고 있는가?’ 라는 질문을 스스로에게 던졌고, 나는 확신을 갖고 대답하지 못했다. 이 글은 리액트에 대해 깊이 있는 학습을 위해 작성하는 글이다. React.js란? 리액트는 SPA 또는 모바일 어플리케이션 UI 개발을 위해 사용하는 라이브러리다. 흔한 디자인…","fields":{"slug":"/React/React.js란/"},"frontmatter":{"date":"March 17, 2022","title":"React.js란?","category":"React","draft":false}}},{"node":{"excerpt":"최근에는 클래스 컴포넌트 대신 함수형 컴포넌트가 사용되고 있다. 그래서 해당 내용을 학습할 기회가 없었다. 하지만 리액트의 초기 설계단계에서 사용된만큼 리액트가 의도한 바를 이해하는데 도움이 될 것 같다는 생각이 들었다. 따라서 이번 글에서는 클래스 컴포넌트의 생명주기 메서드에 대해서 다뤄보려고 한다. 클래스형 컴포넌트의 생명 주기 메서드 모든 컴포넌트는…","fields":{"slug":"/React/React.js 클래스컴포넌트의 생명주기/"},"frontmatter":{"date":"March 17, 2022","title":"React 클래스 컴포넌트의 생명주기","category":"React","draft":false}}},{"node":{"excerpt":"문제 1911번: 흙길 보수하기 문제 풀이 물웅덩이를 지나기 위한 최소한의 널빤지의 개수를 구하는 문제이다. 웅덩이가 존재하지 않는다면 position 을 1 씩 더해주는 방식을 사용했는데 start 와 현재 위치 중 더 최대인 값을 갖게 하는 방식으로 푸는 방식이 더 효율적이다. 그리고 위치를 기반으로 널빤지의 개수를 산출할 때도 while 문을 사용하…","fields":{"slug":"/PS/BOJ 1911 흙길보수하기/"},"frontmatter":{"date":"March 17, 2022","title":"[백준 1911] 흙길 보수하기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1922번: 네트워크 연결 문제 풀이 크루스칼 알고리즘을 활용해 MST(최소스패닝트리)를 생성하는 문제다. Union-find 알고리즘을 활용해 집합을 대표하는 원소 변경과 사이클을 생성하지 않으면서 MST 를 생성한다. 문제 회고 프로그래머스에서 풀었던 섬 연결하기 문제와 거의 동일하다. 간선이 많은 경우에는 MST 를 생성하기 위해 프림 알고리즘…","fields":{"slug":"/PS/BOJ 1922 네트워크 연결/"},"frontmatter":{"date":"March 17, 2022","title":"[백준 1922] 네트워크 연결 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"스패닝 트리 방향이 없는 그래프에서 모든 노드를 포함하면서 순환되는 경로를 제거한 형태의 트리를 스패닝 트리라고 한다. 이 스패닝 트리에서 가중치의 합을 최소로 만드는 스패닝 트리를 최소 스패닝 트리(MST)라고 한다. 크루스칼 알고리즘 그래프 알고리즘은 여러 객체들 사이에 짝을 이루는 관계를 모델링 하기 위해 사용되는 알고리즘 중 하나이다. 위에서 최소…","fields":{"slug":"/알고리즘/크루스칼 알고리즘/"},"frontmatter":{"date":"March 17, 2022","title":"크루스칼 알고리즘","category":"알고리즘","draft":false}}},{"node":{"excerpt":"문제 8980번: 택배 문제 풀이 최대한 많은 박스의 개수를 옮기기 위해서는 가까운 곳부터 박스를 우선적으로 실어야한다. 따라서 먼저 도착지를 기준으로 정렬한다. 정렬된 리스트를 순회한다. 이 때 각각의 배열내의 값은 출발지, 도착지, 박스이다. 순회하기 전에 본인이 지나올 경로를 살펴보면서 최대한 실을 수 있는 무게를 산출한다. 현재 index 의 박스…","fields":{"slug":"/PS/BOJ 8980 택배/"},"frontmatter":{"date":"March 15, 2022","title":"[백준 8980] 택배 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 2583번: 영역 구하기 문제 접근 주어진 사각형을 1 로 채워준다. BFS 를 통해 총 몇개의 영역으로 나뉘는지, 각각의 넓이는 몇인지를 구하는 전형적인 BFS 문제이다. 문제 회고 처음에 방문하는 queue 에 대한 방문 처리와 그리고 처음 방문하게 되면 그 자체로 count 가 1 로 지정했어야했는데 실수를 했다. 내가 queue 를 푸는 in…","fields":{"slug":"/PS/BOJ 2583 영역구하기/"},"frontmatter":{"date":"March 15, 2022","title":"[백준 2583] 영역 구하기 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 10844번: 쉬운 계단 수 문제 접근 2차원 DP 배열을 선언 후 문제에 접근했다. 각 자리의 숫자가 등장하는 개수를 기준으로 DP 배열을 선언했다. 가지치기로 각각의 숫자로 인해 등장할 수 있는 숫자를 count 하는 방식으로 접근했다. 예를 들면 1의 자리에서는 0 은 존재하지 않고, 나머지 숫자들은 모두 1 씩 존재한다. 십의 자리에서는 0,…","fields":{"slug":"/PS/BOJ 10844 쉬운계단수/"},"frontmatter":{"date":"March 15, 2022","title":"[백준 10844] 쉬운 계단 수 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 1202번: 보석 도둑 문제접근 이전에 풀었던 BOJ 1781 컵라면문제와 유사한 유형이다. 컵라면은 우선순위 큐의 길이가 해당 deadline 과 비교해서 커지면 우선순위 큐에서 가장 작은 크기의 컵라면을 제거하는 방식으로 진행하고, 이후에 남은 컵라면을 모두 더하는 방식으로 문제를 풀었다. 하지만 이번에는 보석의 무게를 담는 가방의 조건이 다 다…","fields":{"slug":"/PS/BOJ 1202 보석도둑/"},"frontmatter":{"date":"March 15, 2022","title":"[백준 1202] 보석 도둑 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 2193번: 이친수 문제 풀이 각 자리수가 가지는 이친수의 개수를  배열의 index 로 저장 후 계산한다. 점화식은 크게 2가지로 세울 수 있다. 풀이1 앞에 자리수를 기준으로 생각한다. 5자리를 생각해보자.  의 꼴을 가질 것이다. 그렇다면  는 0 으로 시작해도되고 1 로 시작해도되는 이친수의 집합일 것이다. 따라서  의 값을 가진다. 마지막으…","fields":{"slug":"/PS/BOJ 2193 이친수/"},"frontmatter":{"date":"March 14, 2022","title":"[백준 2193] 이친수 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 설명 1781번: 컵라면 문제 풀이 지금하는 선택이 최선의 선택이 아닐 수도 있다는 것을 염두에 두고 접근해야하는 문제이다. 데드라인을 기준으로 배열을 정렬한다. 처음에 문제를 풀 때는 stack 에 값을 넣고 stack 의 마지막 요소의 값과 새로 들어갈 요소를 비교해서 stack 에 있는 요소의 컵라면의 개수가 더 작다면 pop 해주는 방식으로 …","fields":{"slug":"/PS/BOJ 1781 컵라면/"},"frontmatter":{"date":"March 14, 2022","title":"[백준 1781] 컵라면 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"JS 의 우선순위 큐(Priority Queue)를 직접 구현하기 위해서는 힙(Heap) 자료구조가 필요하다. BOJ 1781 컵라면 문제를 푸는 과정에서 우선순위 큐가 필요했고 이를 위해서 힙부터 구현하면서 JS 로 우선순위 큐를 구현해보려 한다! Heap 힙은 트리 기반의 자료구조이다. 규칙에 따라 크게 두 가지 힙으로 나눌 수 있다.  : 부모 노드…","fields":{"slug":"/알고리즘/JS 로 우선순위 큐 구현하기/"},"frontmatter":{"date":"March 14, 2022","title":"JS 로 우선순위 큐 구현하기","category":"알고리즘","draft":false}}},{"node":{"excerpt":"문제 설명 1012번: 유기농 배추 배추흰지렁이는 인접한 배추로 이동할 수 있고 이는 해충으로부터 배추를 보호한다. 배추는 군데군데 심어져있고 배추의 위치가 주어진다. 해충으로부터 배추를 보호할 수 있도록 최소한으로 필요한 배추흰지렁이의 수를 구한다. 문제 풀이 BFS 를 활용해서 풀 수 있는 문제이다. 대표적인 BFS 유형의 문제로 네트워크의 개수를 산…","fields":{"slug":"/PS/BOJ 1012 유기농배추/"},"frontmatter":{"date":"March 11, 2022","title":"[백준 1012] 유기농 배추 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 설명 3109번: 빵집 그래프 탐색문제이다. 원웅이는 가스를 훔치기 위해 가스관에서 본인의 빵집까지 가스관을 연결시켜야한다. 가스관과 빵집을 연결하는 파이프라인의 최대 개수를 구해야한다. 문제 풀이 DFS 문제이다. 맨 왼쪽의 행부터 하나씩 DFS 를 호출한다. 파이프가 놓여져있는지 확인하기 위해 visited 배열을 사용한다. answer 라는 변…","fields":{"slug":"/PS/BOJ 3190 빵집/"},"frontmatter":{"date":"March 11, 2022","title":"[백준 3190] 빵집 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"이번 글에서는 helper 함수, 컴포넌트 설계와 리스트 페이지 구현을 다뤄보려고한다.\n저번 글과 달리 코드를 먼저 작성하고 그 코드에 대해서 설명하는 방식으로 작성하려고 한다. 1. helper 함수  JS 로 DOM 에 접근하는 경우에는 ,  DOM API 를 자주사용한다. scope 로는 defaultValue 를 할당하고 필요한 경우에만 사용한다.…","fields":{"slug":"/FrontEnd/2021 하반기 프로그래머스 FE과제 리뷰(2)/"},"frontmatter":{"date":"March 10, 2022","title":"2021 하반기 프로그래머스 FE과제 리뷰(2)","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"이번 토요일에 응시 예정인 프로그래머스 FE 데브매칭 테스트에 앞서 이전 과제들을 풀어보는 시간을 가졌다. 이 과제는 Vanilla JavaScript, Html, css 만을 활용해 요구사항을 구현하는 과제이다. 너무 오랜만에 Vanilla JavaScript 만을 활용해 구현하다보니 구현에 어려운 지점들이 종종 있었다. 그래도 작년 부스트캠프 6기에서…","fields":{"slug":"/FrontEnd/2021 하반기 프로그래머스 FE과제 리뷰(1)/"},"frontmatter":{"date":"March 10, 2022","title":"2021 하반기 프로그래머스 FE과제 리뷰(1)","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"오류란 무엇인가? 실패 실수 또는 오차, 컴퓨터 분야에서는 하드웨어의 고장 또는 소프트웨어가 본래의 동작을 할 수 없는 상태입니다. 발생 시점에 따라 분류되는 오류 컴파일 오류는 코드가 컴파일 될 때 컴파일러가 해석하지 못해서 발생합니다. 예를 들면 문법을 잘못 작성하는 경우가 있을 수 있습니다. 런타임 오류는 프로그램이 동작할 때 발견할 수 있는 에러로…","fields":{"slug":"/FrontEnd/에러핸들링/"},"frontmatter":{"date":"March 06, 2022","title":"에러 핸들링","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"프론트 엔드 개발자로서 안전하게 로그인을 처리하는 것은 중요합니다. 이번 TAKEUS 서비스 QA 과정에서 발생했던 이슈도 로그인 부분을 잘 관리하지 못해서 발생했습니다. QA 과정에서 발생한 이슈 문제는 프론트 엔드에서의 에러 처리와 어세스 토큰을 적절하게 관리하지 못한 점에 원인이있었습니다. 에러 처리는 react-toast 를 활용해 처리할 예정이며…","fields":{"slug":"/FrontEnd/안전하게 로그인 관리하기/"},"frontmatter":{"date":"March 05, 2022","title":"안전하게 로그인 관리하기","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"문제 12865번: 평범한 배낭 문제 접근 1시간 정도 고민했지만 세워낸 1차원 DP 점화식으로는 수 많은 반례들이 존재했다. 물건을 순차적으로 탐색할 때 할 수 있는 행동은 크게 2가지로 나뉜다. 만약 물건의 무게가 이전 배낭의 합보다 크다면 배낭에 물건을 넣지 못한다. 물건의 무게가 넘지 않는다면 넣을 수 있다. 과연 물건을 넣는 것이 최대의 가치를 …","fields":{"slug":"/PS/BOJ 12865 평범한 배낭/"},"frontmatter":{"date":"March 04, 2022","title":"[BOJ 12865] 평범한 배낭 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 15685번: 드래곤 커브 문제 접근 새로운 드래곤 커브를 만들 때 이전 단계에서의 방향을 토대로 만들어진다는 아이디어를 기반으로 접근하면 된다. 다음과 같은 4방향이 존재할 때 0 단계 드래콘 커브가 ➡️ 라고 가정하자. 1단계 드래곤 커브는 ➡️ 를 끝점을 기준으로 시계방향으로 회전시킨다면 ⬆️ 이 된다. 1단계 드래곤 커브는 ➡️ ⬆️ 이다. 2단계 드…","fields":{"slug":"/PS/BOJ 15685 드래곤 커브/"},"frontmatter":{"date":"March 04, 2022","title":"[BOJ 15685] 드래곤 커브 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"문제 11055번: 가장 큰 증가 부분 수열 문제 접근 DP는 한 가지 문제에 대해서 단 한번만 풀도록 만들어주는 알고리즘이다. Optional Substructure 에서 효과를 발휘하는데 이는 답을 구하기 위한 계산을 반복하는 문제 구조이다.\nDP는 작은 문제들 속에서 계속 반복되는 연산을 활용해 빠르게 해결할 수 있다. 분할 정복과 유사하지만 DP …","fields":{"slug":"/PS/BOJ 11055 가장 큰 증가하는 부분 수열/"},"frontmatter":{"date":"March 03, 2022","title":"[BOJ 11055] 가장 큰 증가하는 부분수열 (Node.js)","category":"PS","draft":false}}},{"node":{"excerpt":"TL;DR ECMAScript 와 JavaScript 에 대한 차이에 대해서 알아보자. ECMAScript 가 스크립트 언어에 대한 표준이며, JavaScript 가 스크립트 언어 중 하나라는 건 알고 있지만, 그 이상은 알지 못하는 게 개인적으로 아쉬웠다. 이 궁금증을 해소하기 위해 여러 블로그를 찾아보면서 정리해보았다. 간략하게 용어에 대해 정리하는 …","fields":{"slug":"/JS/ECMAScript/"},"frontmatter":{"date":"March 01, 2022","title":"ECMAScript","category":"JS","draft":false}}},{"node":{"excerpt":"TL;DR JS 의 iterable, iterator, Generator 에 대해서 알아보자. iterable\nSymbol.iterator 메서드를 가진 객체이며, iterator 를 return 한다 iterator\nnext 메서드를 가지고, {value, done} 객체를 return 한다. Generator\nIterable 이면서 Iterator 인…","fields":{"slug":"/JS/iterable, iterator, generator/"},"frontmatter":{"date":"February 28, 2022","title":"iterable, iterator, generator","category":"JS","draft":false}}},{"node":{"excerpt":"TL;DR 칸반보드에서는 스토리 아이템을 관리할 수 있다. 트렐로의 네트워크 탭을 참고해 최소한의 상태를 변화시켰다. 아이템 이동 시 드랍될 영역에 대한 인식이 어려운 문제가 있었고, 파란색 영역을 표시하는 기능을 추가해 UX 를 개선했다. 스토리를 관리하는 칸반보드 칸반보드에서는 스토리 아이템을 관리할 수 있다. 칸반 보드에서 각각의 아이템은 하나 스토…","fields":{"slug":"/FrontEnd/칸반보드와 UX 개선/"},"frontmatter":{"date":"December 06, 2021","title":"칸반보드와 UX 개선","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"TL;DR Context API 와 Reducer 를 활용한 상태관리에서 느꼈던 불편함을 정리했다. 마이그레이션은 일종의 리팩토링이다. 같은 동작을 보장하기 위해 우리는 테스트 코드를 작성을 시도했지만 실패했다. 기능 명세를 기반으로 Recoil 로의 마이그레이션을 성공하고, 상태 관리 라이브러리를 왜 쓰는지를 체감했다. 부스트 캠프 팀프로젝트인 Hyup…","fields":{"slug":"/React/Recoil로의 마이그레이션/"},"frontmatter":{"date":"December 05, 2021","title":"Recoil Migration","category":"React","draft":false}}},{"node":{"excerpt":"TL;DR 부스트캠프 Web23팀 프로젝트인 협업은 애자일 방법론으로 프로젝트를 진행할 때 발생하는 이슈(에픽, 스토리, 테스크) 를 관리하기 위한 협업툴이다. 상태 관리의 대상에 대한 고민을 통해 에픽, 스토리, 테스크 중 테스크를 제외했다. 기존 상태 관리의 구조였던 중첩 구조를 분리했다. 우리 팀의 고민 부스트캠프의 그룹 프로젝트를 하면서 가장 신경…","fields":{"slug":"/FrontEnd/상태관리대상과 구조/"},"frontmatter":{"date":"December 03, 2021","title":"상태관리의 대상과 구조","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"TL;DR Webpack 은 효율적인 모듈 시스템 활용과 코드 스플리팅을 통한 로딩 성능 향상을 위해 사용된다. Webpack 은 웹 개발 작업을 자동화할 수 있는 도구이다. Webpack 을 사용하는 이유 효율적인 모듈 시스템 활용 코드 스플리팅을 통한 로딩 성능 향상 여러 로더를 통해 하나의 파일 또는 여러 개의 묶음 파일로 만드는 과정을 통해 웹 브…","fields":{"slug":"/개발환경/바닥부터_개발환경_구축하기/"},"frontmatter":{"date":"November 12, 2021","title":"바닥부터 개발환경 구축하기","category":"개발환경","draft":false}}},{"node":{"excerpt":"TL;DR 브라우저의 주된 목적은 웹 페이지를 브라우저 화면에 렌더링하는 것이 주된 목적이다. 브라우저의 렌더링 과정을 이해하는 것은 브라우저 렌더링 최적화를 위해 필수적인 지식이다. 이번 포스트에서는 크롬 브라우저(21년 기준 65% 의 점유율) 를 예시로 다룬다. 브라우저의 기본 구조 사용자 인터페이스 : 주소 표시줄, 이전/다음 버튼, 북마크 메뉴 …","fields":{"slug":"/FrontEnd/브라우저의 렌더링과정/"},"frontmatter":{"date":"November 12, 2021","title":"브라우저의 렌더링 과정","category":"FrontEnd","draft":false}}},{"node":{"excerpt":"TL;DR 자료 구조는 왜 사용할까? 어떻게 학습해야할까? 선형 자료 구조 5가지 선형 자료 구조 : 배열, 링크드 리스트, 스택, 큐, 해쉬 테이블 자료 구조는 왜 사용할까? 해당 질문에 대해서 너무 추상적인 블로그 글 들이 많았기 때문에 자료 구조의 정의를 먼저 찾아봤다. 자료 구조는 데이터의 집합에 효율적인 과, 을 위해 데이터를 구분하여 표현하는 …","fields":{"slug":"/알고리즘/선형 자료구조에 대한 고찰/"},"frontmatter":{"date":"November 12, 2021","title":"선형 자료구조에 대한 고찰","category":"알고리즘","draft":false}}},{"node":{"excerpt":"이번 포스트에서는 비동기 프로그래밍을 위해서 필요한 AJAX 에 대해서 이야기해보려고 한다. TL;DR AJAX 는 비동기적인 웹 어플리케이션 제작을 위한 웹 개발 기법이다. AJAX 를 통해 대역폭 낭비를 방지하고, 사용자의 상호작용을 향상시킬 수 있다. AJAX 란? Ajax(Asynchronous JavaScript and XML, 에이잭스) 의 약…","fields":{"slug":"/FrontEnd/AJAX란 무엇인가/"},"frontmatter":{"date":"October 13, 2021","title":"AJAX 란 무엇인가","category":"FrontEnd","draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["2486386679","3128451518"]}