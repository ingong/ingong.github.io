{"componentChunkName":"component---src-templates-blog-post-js","path":"/운영체제/프로세스와 스레드/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"c6ae608c-ef0e-5813-b19e-efc8ac361966","excerpt":"TL;DR 프로레스 스레드 프로세스 (process) concepts 프로세스란 운영체제에 의해 메모리 공간을 할당받아 CPU에서 실행/제어되고 있는 프로그램이다. 프로세스는 데이터(data), 자원(memory), 스레드(Thread…","html":"<h3 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h3>\n<ol>\n<li>프로레스</li>\n<li>스레드</li>\n</ol>\n<h2 id=\"프로세스-process\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-process\" aria-label=\"프로세스 process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 (process)</h2>\n<h3 id=\"concepts\" style=\"position:relative;\"><a href=\"#concepts\" aria-label=\"concepts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>concepts</h3>\n<p>프로세스란 운영체제에 의해 메모리 공간을 할당받아 CPU에서 실행/제어되고 있는 프로그램이다. 프로세스는 데이터(data), 자원(memory), 스레드(Thread)로 구성되고, 스레드가 데이터와 자원을 활용해 작업을 수행한다.</p>\n<p>프로세스는 프로그램과는 어떻게 다를까? 프로그램은 파일 시스템에 존재하는 실행파일이다. 프로세스는 프로그램을 실행시키는 주체이면서 프로그램의 하나의 인스턴스다. 따라서 프로그램은 하나만 존재하지만 프로세스는 여러 개 존재할 수 있다.</p>\n<h3 id=\"프로세스의-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\" aria-label=\"프로세스의 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 상태</h3>\n<p>프로세스는 보통 6가지 상태 중 하나를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>interrupt<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n                         v                                 <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>              <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>                        <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>          <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>admitted<span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">|</span> ready <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>scheduler dispatch<span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">|</span> running <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>exit<span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">|</span> terminated <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>              <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>                        <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>          <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n                         <span class=\"token operator\">^</span>           <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>           <span class=\"token operator\">|</span>\n                         <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> waiting <span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n         <span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span> or event completion     <span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>     <span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span> or event wait</code></pre></div>\n<ul>\n<li>New: 프로세스가 처음 생성되었을 때.</li>\n<li>Ready: 프로세스가 프로세서에 할당되기를 기다릴 때.</li>\n<li>Running: 프로세스가 할당되어 실행될 때.</li>\n<li>Blocked: 프로세스가 이벤트를 기다릴 때.</li>\n<li>Terminated: 프로세스가 실행을 마쳤을 때.</li>\n<li>Suspended: 외부적인 이유로 프로세스가 얼어붙은 상태. Suspend/Blocked와 Suspended/Ready 상태로 나뉠 수 있는데, 만약 I/O같은 작업이 진행 중인 경우에는 Suspended/Blocked에서 Suspended/Ready 상태로 바뀔 수 있다.</li>\n</ul>\n<h3 id=\"process-control-block-pcb\" style=\"position:relative;\"><a href=\"#process-control-block-pcb\" aria-label=\"process control block pcb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process Control Block (PCB)</h3>\n<p>운영 체제 커널의 자료 구조이며, 프로세스 제어를 위해 필요한 정보를 포함한다. 이는 프로세스 상태 관리와 Context Switching을 위해서 필요하다. PCB에는 다음과 같은 정보가 담겨 있다.</p>\n<ul>\n<li>Process state: 프로세스의 상태</li>\n<li>Program Counter: 해당 프로세스가 이어서 실행해야 할 명령의 주소를 가리키는 카운터</li>\n<li>CPU Registers: 프로세스가 <code class=\"language-text\">인터럽트</code> 후 올바르게 작업을 이어가기 위해 참조하는 CPU 레지스터 값</li>\n<li>CPU-scheduling information: 프로세스의 중요도, 스케줄링 큐 포인터 등 스케줄링 파라미터 정보.</li>\n<li>Memory-management information: base, limit 레지스터 값, 페이지 테이블 등 메모리 시스템 정보.</li>\n<li>Accounting information: 사용된 CPU 총량, 프로세스 개수, 시간 제한 등.</li>\n<li>I/O status information: 프로세스에 할당된 입출력 장치 목록, 열린 파일 목록 등.</li>\n</ul>\n<div align=\"center\">\n  <img src=\"../../assets/프로세스와스레드1.png\">\n</div>\n<h2 id=\"스레드-threads\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-threads\" aria-label=\"스레드 threads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 (threads)</h2>\n<p>스레드는 <strong>프로세스의 실행 단위</strong>이다. 하나의 프로세스가 <strong>한 번에 하나의 작업만 수행하는 것은 싱글스레드</strong>(Single thread)이며, 하나의 프로세스가 <strong>동시에 여러 작업을 수행하는 것은 멀티스레드</strong>(Multi thread)라고 한다.</p>\n<h3 id=\"concepts-1\" style=\"position:relative;\"><a href=\"#concepts-1\" aria-label=\"concepts 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concepts</h3>\n<p>스레드는 프로세스 내에서 각각 Stack만 할당받고, Code, Data, Heap 영역은 공유한다. 프로세스내의 주소공간이나 자원 등과 같은 프로세스 내에 스레드끼리 공유하면서 실행된다. 같은 프로세스 안에 있는 여러 스레드들은 같은 힙 공간을 공유한다.\n하나의 스레드가 별도로 갖는 정보에 대해서 좀 더 자세하게 알아보자. 스레드는 별도의 스택, 프로그램 카운터, 레지스터 셋을 갖는다.</p>\n<ul>\n<li>스택</li>\n</ul>\n<p>스택은 함수 호출 시 전달되는 인자, 되돌아갈 주소 값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간이다. 스택 메모리 공간이 독립적이라는 것은 독립적인 함수 호출이 가능하다는 의미이며 이는 독립적인 실행 흐름이 추가되는 것을 의미한다. 따라서 독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당한다.</p>\n<ul>\n<li>프로그램 카운터 (Program Counter)</li>\n</ul>\n<p>스레드가 명령어의 어디까지 수행하였는지를 나타낸다. 스레드는 CPU를 할당받았다가 스케줄러에 의해 다시 CPU를 빼앗긴다. 따라서 명령어가 연속적으로 수행되지 못하고 이 때 어느 부분까지 수행되었는지를 기억해야한다. 따라서 PC를 독립적으로 할당한다.</p>\n<h3 id=\"스레드-사용의-장점\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"스레드 사용의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 사용의 장점</h3>\n<p>멀티 스레딩은 하나의 프로세스를 다수의 실행 단위로 구분하여 자원을 공유하고 자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상시키는 것이다. 멀티 스레딩의 장점과 단점에 대해서 알아보자.</p>\n<ol>\n<li>메모리 절약</li>\n</ol>\n<p>스레드는 프로세스에 비해 점유하는 물리 메모리의 크기가 훨씬 적다. 그래서 스레드를 <strong>경량 프로세스</strong>라고도 부른다.</p>\n<ol>\n<li>프로세스 콘텍스트 스위칭에 비해 오버헤드 절감</li>\n</ol>\n<p>멀티 프로세스로 실행되는 작업을 멀티 스레드로 실행하게 되면 프로세스를 생성하여 자원을 할당하는 과정도 줄어들뿐더러 프로세스를 콘텍스트 스위칭(Context Switching)하는 것보다 오버헤드를 더 줄일 수 있게 된다.</p>\n<ol>\n<li>작업들 간의 통신 비용 절감</li>\n</ol>\n<p>두 프로세스가 만약 하나의 데이터를 공유하려면 메시지 패싱이나 공유 메모리 또는 파이프를 사용해야 한다. 이는 효율도 떨어지고 구현 및 관리하기도 번거롭다. 따라서 하나의 프로세스 내에서 자원을 공유하는 스레드를 사용한다면 여러 개의 프로세스를 사용할 때보다 비용을 절감할 수 있다.</p>\n<h3 id=\"스레드-사용의-단점\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%82%AC%EC%9A%A9%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"스레드 사용의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 사용의 단점</h3>\n<ol>\n<li>하나의 스레드에 문제가 생기면 전체 프로세스가 영향을 받는다.</li>\n<li>동기화가 필요하고 과도한 동기화는 병목현상과 교착상태의 문제를 유발할 수 있다.</li>\n</ol>\n<h3 id=\"스레드와-프로세스의-차이점\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"스레드와 프로세스의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드와 프로세스의 차이점</h3>\n<p>프로세스는 완전히 독립적이기 때문에 메모리 영역을 다른 프로세스와 공유하지 않는다. 하지만 스레드는 해당 스레드를 위한 스택을 생성할 뿐 프로세스 내의 메모리를 공유해서 사용한다.</p>\n<div align=\"center\">\n  <img src=\"../../assets/프로세스와스레드2.png\">\n</div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h2>\n<ul>\n<li><a href=\"https://beststar-1.tistory.com/6\">tistory: 프로세스와 스레드</a></li>\n<li><a href=\"https://jhnyang.tistory.com/6\">프로그램과 프로세스의 차이</a></li>\n<li><a href=\"https://parksb.github.io/article/8.html\">공룡책으로 정리하는 운영체제 Ch.4</a></li>\n</ul>","frontmatter":{"title":"운영체제와 스레드","date":"April 12, 2022"}}},"pageContext":{"slug":"/운영체제/프로세스와 스레드/","previous":{"fields":{"slug":"/회고/4월 2주차 회고/"},"frontmatter":{"title":"4월 2주차 회고"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}