{"componentChunkName":"component---src-templates-blog-post-js","path":"/Arrange/[JS] this/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"c6da3140-c251-5fee-8da1-330859bd8c18","excerpt":"이 글은 파편화된 지식을 통합하는데 그 목적을 두고 있습니다. 다양한 경험을 통해 배웠던 내용들을 저만의 언어로 표현하기 위한 글입니다. this 란 무엇인가 MDN 의 정의에 따르면 this 키워드는 지금 동작하고 있는 코드를 가지고 있는 객체를 가리킨다. 프로토타입 이론에 근거했을 때 this 는 현재 함수를 invoke 한 객체이다. 또한 this 는 런타임에 바인딩되기 때문에 함수의 호출부를 식별해야한다. this 의 동작방식 this 바인딩은 명시적 바인딩과 암시적 바인딩 크게…","html":"<p>이 글은 파편화된 지식을 통합하는데 그 목적을 두고 있습니다. 다양한 경험을 통해 배웠던 내용들을 저만의 언어로 표현하기 위한 글입니다.</p>\n<h2 id=\"this-란-무엇인가\" style=\"position:relative;\"><a href=\"#this-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"this 란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 란 무엇인가</h2>\n<p>MDN 의 정의에 따르면 this 키워드는 지금 동작하고 있는 코드를 가지고 있는 객체를 가리킨다. 프로토타입 이론에 근거했을 때 this 는 현재 함수를 invoke 한 객체이다. 또한 this 는 런타임에 바인딩되기 때문에 함수의 호출부를 식별해야한다.</p>\n<h2 id=\"this-의-동작방식\" style=\"position:relative;\"><a href=\"#this-%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"this 의 동작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 의 동작방식</h2>\n<p>this 바인딩은 명시적 바인딩과 암시적 바인딩 크게 2가지로 나뉘어집니다.</p>\n<p>명시적 바인딩은 <code class=\"language-text\">apply, call, bind</code> 키워드를 사용해 인수로 객체를 전달하는 방법입니다. 각각의 방식에 대해 간단하게 설명해보면 다음과 같습니다. bind 는 this 를 바인딩해 새로운 함수를 반환합니다. call 과 apply 는 해당 this 를 바인딩해 즉시 호출하며 apply 는 call 과 다르게 배열의 형태로 매개변수를 전달합니다.</p>\n<p>암시적 바인딩은 <code class=\"language-text\">new</code> 키워드, 객체 내의 메서드, 전역 스코프로 나누어 설명할 수 있습니다. <code class=\"language-text\">new</code> 키워드를 사용한 경우에는 <code class=\"language-text\">this</code> 는 만들어진 생성자 함수를 가리킵니다. 객체 내의 메서드에서는 해당 객체를 가르킵니다. 전역 스코프에서 사용되는 경우에는 브라우저에서는 window 를 가르킵니다. 엄격 모드의 경우에는 <code class=\"language-text\">undefined</code> 입니다.</p>\n<p>화살표 함수는 this 가 정적으로 바인딩됩니다. 함수의 상위 스코프를 결정하는 렉시컬 스코프 방식과 유사하게 상위 컨텍스트의 객체를 가르킵니다.</p>","frontmatter":{"title":"[JS] this","date":"March 12, 2022"}}},"pageContext":{"slug":"/Arrange/[JS] this/","previous":{"fields":{"slug":"/BOJ Code/BOJ 1012 유기농배추/"},"frontmatter":{"title":"[백준 1012] 유기농 배추 (Node.js)"}},"next":{"fields":{"slug":"/자료구조/JS 로 우선순위 큐 구현하기/"},"frontmatter":{"title":"JS 로 우선순위 큐 구현하기"}}}},"staticQueryHashes":["2486386679","3128451518"]}