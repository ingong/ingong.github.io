{"componentChunkName":"component---src-templates-blog-post-js","path":"/Arrange/[JS] 함수/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"7581b555-e164-5978-9cc4-a76bb27433b5","excerpt":"다양한 경험을 통해 학습했던 내용을 저만의 언어로 정리하는데 목적을 두고 있는 글입니다. 생성자의 메서드에 화살표 문법을 사용하여 얻는 이점 생성자 내부에서 화살표 함수를 메소드로 사용하는 주된 장점은 함수 생성시  의 값이 설정되고 그 이후에는 변경할 수 없다는 것이다. 이는 화살표 함수의 경우 this 가 evoke한 객체가 아닌 선언된 상위 스코프에 결정된다는 원리에 근거하고 있다. 즉, 화살표 함수는 컨텍스트 변경이 발생하지 않는다. 고차 함수(high-order function…","html":"<p>다양한 경험을 통해 학습했던 내용을 저만의 언어로 정리하는데 목적을 두고 있는 글입니다.</p>\n<h2 id=\"생성자의-메서드에-화살표-문법을-사용하여-얻는-이점\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%ED%99%94%EC%82%B4%ED%91%9C-%EB%AC%B8%EB%B2%95%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%BB%EB%8A%94-%EC%9D%B4%EC%A0%90\" aria-label=\"생성자의 메서드에 화살표 문법을 사용하여 얻는 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자의 메서드에 화살표 문법을 사용하여 얻는 이점</h2>\n<p>생성자 내부에서 화살표 함수를 메소드로 사용하는 주된 장점은 함수 생성시 <code class=\"language-text\">this</code> 의 값이 설정되고 그 이후에는 변경할 수 없다는 것이다. 이는 화살표 함수의 경우 this 가 evoke한 객체가 아닌 선언된 상위 스코프에 결정된다는 원리에 근거하고 있다. 즉, 화살표 함수는 컨텍스트 변경이 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> dave <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dave'</span><span class=\"token punctuation\">)</span>\n\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sayName1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// John</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sayName2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// John</span>\n\n<span class=\"token comment\">// 일반 함수의 'this'값은 변경할 수 있지만, 화살표 함수는 변경할 수 없다.</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sayName1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>dave<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Dave (because \"this\" is now the dave object)</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sayName2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>dave<span class=\"token punctuation\">)</span> <span class=\"token comment\">// John</span></code></pre></div>\n<h2 id=\"고차-함수high-order-function이란\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98high-order-function%EC%9D%B4%EB%9E%80\" aria-label=\"고차 함수high order function이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고차 함수(high-order function)이란?</h2>\n<p>다른 함수를 매개 변수로 사용하여 데이터를 처리하거나 결과로 함수를 반환하는 함수이다. 고차 함수는 반복적으로 수행되는 어떤 연산을 추상화하기 위한 것이다. 예를 들어 <code class=\"language-text\">map</code> 은 고차 함수를 사용해 배열의 각 항목을 변환하고, 변환된 데이터로 새로운 배열을 반환한다. 이외에도 <code class=\"language-text\">forEach</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">reduce</code> 가 있다.</p>","frontmatter":{"title":"[JS] 함수(Function)","date":"March 15, 2022"}}},"pageContext":{"slug":"/Arrange/[JS] 함수/","previous":{"fields":{"slug":"/Arrange/[Web] 이벤트/"},"frontmatter":{"title":"[Web] 이벤트"}},"next":{"fields":{"slug":"/BOJ Code/BOJ 1202 보석도둑/"},"frontmatter":{"title":"[백준 1202] 보석 도둑 (Node.js)"}}}},"staticQueryHashes":["2486386679","3128451518"]}