{"componentChunkName":"component---src-templates-blog-post-js","path":"/자료구조/JS 로 우선순위 큐 구현하기/","result":{"data":{"site":{"siteMetadata":{"title":"Ingong's Log","author":"ingong","siteUrl":"https://ingong.github.io","comment":{"disqusShortName":"","utterances":"ingong/ingong.github.io"},"sponsor":{"buyMeACoffeeId":"ingong"}}},"markdownRemark":{"id":"297dbfb7-f8f1-5648-b6ab-b1c00983a1da","excerpt":"JS 의 우선순위 큐(Priority Queue)를 직접 구현하기 위해서는 힙(Heap) 자료구조가 필요하다. BOJ 1781 컵라면 문제를 푸는 과정에서 우선순위 큐가 필요했고 이를 위해서 힙부터 구현하면서 JS 로 우선순위 큐를 구현해보려 한다! Heap 힙은 트리 기반의 자료구조이다. 규칙에 따라 크게 두 가지 힙으로 나눌 수 있다.  : 부모 노드는 항상 자식 노드보다 크거나 같아야 한다.  : 부모 노드는 항상 자식 노드보다 값이 작아야 한다. 일반적으로 Heap…","html":"<p>JS 의 우선순위 큐(Priority Queue)를 직접 구현하기 위해서는 힙(Heap) 자료구조가 필요하다. BOJ 1781 컵라면 문제를 푸는 과정에서 우선순위 큐가 필요했고 이를 위해서 힙부터 구현하면서 JS 로 우선순위 큐를 구현해보려 한다!</p>\n<h1 id=\"heap\" style=\"position:relative;\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h1>\n<p>힙은 트리 기반의 자료구조이다. 규칙에 따라 크게 두 가지 힙으로 나눌 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">Max Heap</code> : 부모 노드는 항상 자식 노드보다 크거나 같아야 한다.</li>\n<li><code class=\"language-text\">Min Heap</code> : 부모 노드는 항상 자식 노드보다 값이 작아야 한다.</li>\n</ul>\n<p>일반적으로 Heap 자료구조는 이진트리로 구현한다. <strong>이진트리</strong>는 각각의 부모노드가 최대 2개 이하의 자식노드를 가지는 트리 자료구조이다. 자식노드는 각각 왼쪽 자식 노드와 오른쪽 자식 노드로 구성된다. 이 때 힙은 완전 이진 트리를 사용한다.</p>\n<p>이진 트리와 관련해서 항상 헷갈렸던 이진 트리를 나타내는 용어 3가지에 대해서 간략하게 정리해보자. 살펴볼 내용은 포화 이진 트리, 완전 이진 트리, 정 이진 트리이다.</p>\n<ul>\n<li>포화 이진 트리</li>\n</ul>\n<p>모든 레벨이 꽉 찬 이진 트리를 의미한다.</p>\n<ul>\n<li>완전 이진 트리</li>\n</ul>\n<p>위에서 아래로, 왼쪽에서 오른쪽으로 순서대로 차곡차곡 채워진 이진 트리를 의미한다. 마지막 레벨을 제외한 나머지 노드는 꽉 차있어야한다.</p>\n<ul>\n<li>정 이진 트리</li>\n</ul>\n<p>모든 노드가 0개 혹은 2개의 자식 노드만을 갖는 이진 트리를 의미한다.</p>\n<p>힙이 완전 이진 트리를 사용한다는 내용에 근거하여 최소 힙의 규칙을 도출해보면 다음과 같다.</p>\n<ol>\n<li>부모 노드는 항상 자식 노드보다 값이 작야아한다.</li>\n<li>한 레벨이 모두 채워져야 다음 레벨로 트리가 늘어날 수 있다.</li>\n</ol>\n<p>JS 에서는 이를 배열로 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">왼쪽 자식 노드 Index <span class=\"token operator\">=</span> 부모 노드 Index <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n오른쪽 자식 노드 Index <span class=\"token operator\">=</span> 부모 노드 Index <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n부모 노드 Index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>자식 노드 Index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span></code></pre></div>\n<h2 id=\"힙은-왜-언제-사용할까\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EC%9D%80-%EC%99%9C-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"힙은 왜 언제 사용할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙은 왜 언제 사용할까?</h2>\n<p>힙은 주로 최소 또는 최대 값을 O(1)의 시간 복잡도로 얻어내기 위해서 사용된다. 배열이나 연결리스트에서는 선형 탐색으로 인해 최소/최대 값을 얻기 위해서 O(n) 이 소요된다. 따라서 이진 탐색을 활용하면 O(logn) 까지도 시간 복잡도를 줄일 수 있다.</p>\n<p>우선순위 큐를 구현하는데 사용할 수 있고, 다익스트라 알고리즘을 구현하는 과정에서 최소 비용을 기반으로 그래프를 탐색하는데 사용할 수 있다.</p>\n<h2 id=\"최소-힙-구현하기\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%ED%9E%99-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"최소 힙 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 힙 구현하기</h2>\n<p>삽입과 삭제 이후에 heap 이 최소 힙이 유지되도록 만들어주는 과정이 중요하다. 소스코드를 읽어보고 삽입 삭제 과정에 대해서 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">getLeftChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">parentIndex</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token function-variable function\">getRightChildIndex</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">parentIndex</span> <span class=\"token operator\">=></span> parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token function-variable function\">getParentIndex</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">childIndex</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>childIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function-variable function\">peek</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">heapifyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">const</span> lastInsertedNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParentIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> lastInsertedNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span>\n        index <span class=\"token operator\">=</span> parentIndex\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastInsertedNode\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>삽입을 하는 경우를 살펴보자. 정렬의 기준이 되는 <code class=\"language-text\">key</code> 와 <code class=\"language-text\">value</code> 를 갖는 객체인 <code class=\"language-text\">node</code> 를 만든다. 그리고 <code class=\"language-text\">heap</code> 의 마지막 요소에 해당 <code class=\"language-text\">node</code> 를 넣어준다. 그리고 <code class=\"language-text\">heap</code> 이 다시 최소 힙을 만족시키는 <code class=\"language-text\">heapifyUp</code> 메서드를 실행시킨다. <code class=\"language-text\">heapifyUp</code> 에 대해서 살펴보자.</p>\n<h3 id=\"code-classlanguage-textheapifyupcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textheapifyupcode\" aria-label=\"code classlanguage textheapifyupcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">heapifyUp</code></h3>\n<ul>\n<li><code class=\"language-text\">let index = this.heap.length - 1</code></li>\n</ul>\n<p>집어넣은 node 가 갖는 index 를 let 으로 index 로 선언하고 저장한다.</p>\n<ul>\n<li><code class=\"language-text\">const lastInsertedNode = this.heap[index]</code></li>\n</ul>\n<p>바꿔줘야하는 node 에 대한 값을 해당 변수에 저장시켜놓는다. 해당 node 는 target index 가 발견되면 해당 index 에 대입시켜준다.</p>\n<ul>\n<li><code class=\"language-text\">while 문</code></li>\n</ul>\n<p>본인의 부모 노드의 index 를 저장한다. 이 자료구조의 정렬 기준은 key 이고 삽입된 노드의 key 값보다 부모 노드의 key 가 크다면 변경시켜준다. 만약 크지않다면 자료구조 내에 규칙이 유지되고 있기 때문에 while 문을 종료시킨다. 이 과정은 한 레벨 위의 부모 노드에 한정되지 않고 해당 규칙을 만족시킬 때까지 계속 올라가면서 탐색한다.</p>\n<ul>\n<li><code class=\"language-text\">this.heap[index] = lastInsertedNode</code></li>\n</ul>\n<p>종료될 당시 index 에는 변경되어야할 parentIndex 가 저장되어있기 때문에 기존에 lastInsertedNode 를 해당 index 에 대입한다.</p>\n<h2 id=\"삭제\" style=\"position:relative;\"><a href=\"#%EC%82%AD%EC%A0%9C\" aria-label=\"삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삭제</h2>\n<p>이제 삭제하는 과정에 대해서 살펴보자. 힙에서 삭제를 한다면 힙의 최상위 노드가 제거될 것이며 삽입할 때와 동일하게 힙이 규칙을 만족하도록 변경시켜줘야한다. 제거하는 메서드를 살펴보면 최상위 노드를 제거하고 heap 의 마지막 index 에 들어있는 요소를 꺼내서 맨 앞의 index 에 대입시켜준다. 그리고 규칙이 지켜지지 않은 heap 을 다시 규칙에 맞게 만들어주는 heapifyDown 메서드를 실행시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\n\t<span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n\t    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 끝에 있는 노드를 부모로 만들고</span>\n\t      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 다시 min heap 의 형태를 갖추도록 한다.</span>\n\t    <span class=\"token punctuation\">}</span>\n\n\t    <span class=\"token keyword\">return</span> rootNode\n\t <span class=\"token punctuation\">}</span>\n\n\t <span class=\"token function-variable function\">heapifyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length\n\t    <span class=\"token keyword\">const</span> rootNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n\t    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t      <span class=\"token keyword\">const</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeftChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t      <span class=\"token keyword\">const</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRightChildIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n\t      <span class=\"token keyword\">const</span> smallerChildIndex <span class=\"token operator\">=</span>\n\t        rightChildIndex <span class=\"token operator\">&lt;</span> count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key\n\t          <span class=\"token operator\">?</span> rightChildIndex\n\t          <span class=\"token operator\">:</span> leftChildIndex\n\n\t      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;=</span> rootNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>smallerChildIndex<span class=\"token punctuation\">]</span>\n\t        index <span class=\"token operator\">=</span> smallerChildIndex\n\t      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span>\n\t    <span class=\"token punctuation\">}</span>\n\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rootNode\n\t  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"code-classlanguage-textheapifydowncode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textheapifydowncode\" aria-label=\"code classlanguage textheapifydowncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">heapifyDown</code></h3>\n<p>메서드의 이름에서 알 수 있듯이 위에서 내려오면서 탐색하면서 바꿔주는 과정이다. 부모노드를 기준으로는 최대 2개의 자식 노드를 가질 수 있다. 2개의 자식 노드를 가진다고 가정했을 때 이 노드들 중 더 작은 key 값을 갖는 노드와 위치를 바꿔주어야한다.</p>\n<p>먼저 while 문의 종료조건은 부모의 왼쪽 자식노드의 index 가 count 보다 같거나 커지면 종료하게 된다. 트리를 그려보면 해당 조건은 더 이상 해당 부모 노드의 자식 노드가 존재하지 않음을 나타낸다. 이후의 코드를 살펴보면 왼쪽, 오른쪽 자식 노드의 key 를 비교해 더 작은 key 를 갖는 노드의 index 를 저장해준다.</p>\n<p>그리고 해당 자식 노드의 key 가 부모 노드의 key 보다 작으면 두 노드의 위치를 변경시킨다.</p>\n<h1 id=\"우선순위-큐\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90\" aria-label=\"우선순위 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 큐</h1>\n<p>우선순위 큐는 다음과 같이 <code class=\"language-text\">Heap</code> 을 상속받아 사용할 수 있다. <code class=\"language-text\">enqueue</code> 는 우선순위와 값을 입력받아 queue 에 삽입하는 메서드이며, <code class=\"language-text\">dequeue</code> 는 상위 요소를 제거하고 반환하는 메서드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">enqueue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">priority<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">dequeue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://jun-choi-4928.medium.com/javascript%EB%A1%9C-heap-priority-queue-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-8bc13bf095d9\">[Medium] javascript로 heap-priority-queue 구현하기</a></li>\n</ul>","frontmatter":{"title":"JS 로 우선순위 큐 구현하기","date":"March 14, 2022"}}},"pageContext":{"slug":"/자료구조/JS 로 우선순위 큐 구현하기/","previous":{"fields":{"slug":"/BOJ Code/BOJ 1012 유기농배추/"},"frontmatter":{"title":"[백준 1012] 유기농 배추 (Node.js)"}},"next":{"fields":{"slug":"/BOJ Code/BOJ 1781 컵라면/"},"frontmatter":{"title":"[백준 1781] 컵라면 (Node.js)"}}}},"staticQueryHashes":["2486386679","3128451518"]}